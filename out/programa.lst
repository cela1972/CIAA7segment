
out/programa.elf:     file format elf32-littlearm
out/programa.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a001169

Program Header:
0x70000001 off    0x00011d1c vaddr 0x1a001d1c paddr 0x1a001d1c align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010058 vaddr 0x10000058 paddr 0x10000058 align 2**16
         filesz 0x00000000 memsz 0x00000028 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00001d24 memsz 0x00001d24 flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a001d24 align 2**16
         filesz 0x00000058 memsz 0x00000058 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d1c  1a000000  1a000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000058  10000000  1a001d24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020058  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020058  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020058  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020058  2**2
                  CONTENTS
  6 .bss          00000028  10000058  10000058  00010058  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020058  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020058  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020058  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020058  2**2
                  CONTENTS
 11 .ARM.exidx    00000008  1a001d1c  1a001d1c  00011d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .uninit_RESERVED 00000000  10000000  10000000  00020058  2**2
                  CONTENTS
 13 .noinit_RAM2  00000000  10080000  10080000  00020058  2**2
                  CONTENTS
 14 .noinit_RAM3  00000000  20000000  20000000  00020058  2**2
                  CONTENTS
 15 .noinit_RAM4  00000000  20008000  20008000  00020058  2**2
                  CONTENTS
 16 .noinit_RAM5  00000000  2000c000  2000c000  00020058  2**2
                  CONTENTS
 17 .noinit       00000000  10000080  10000080  00020058  2**2
                  CONTENTS
 18 .debug_info   00013387  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 00002fc3  00000000  00000000  000333df  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    00004a1f  00000000  00000000  000363a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 000006a8  00000000  00000000  0003adc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 00000620  00000000  00000000  0003b469  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  000096ac  00000000  00000000  0003ba89  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_line   00009853  00000000  00000000  00045135  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    0001c2b5  00000000  00000000  0004e988  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      0000007f  00000000  00000000  0006ac3d  2**0
                  CONTENTS, READONLY
 27 .ARM.attributes 00000039  00000000  00000000  0006acbc  2**0
                  CONTENTS, READONLY
 28 .debug_frame  00000f70  00000000  00000000  0006acf8  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000058 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a001d1c l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10000080 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 cr_startup_lpc43xx.c
00000000 l    df *ABS*	00000000 sapi_uart.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 CIAA7segment.c
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a000584 l     F .text	00000014 Chip_ADC_GetClockIndex
1a000598 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a000754 l     F .text	000000a0 pll_calc_divs
1a0007f4 l     F .text	00000100 pll_get_frac
1a0008f4 l     F .text	0000004c Chip_Clock_FindBaseClock
1a000b68 l     F .text	00000022 Chip_Clock_GetDivRate
10000060 l     O .bss	00000008 audio_usb_pll_freq
1a001aa0 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 fpu_init.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a001b0c l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a000ea8 l     F .text	0000002c Chip_UART_GetIndex
1a001b54 l     O .text	00000008 UART_BClock
1a001b5c l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 board.c
1a001010 l     F .text	00000044 Board_LED_Init
1a001b6c l     O .text	0000000c gpioLEDBits
00000000 l    df *ABS*	00000000 board_sysinit.c
1a001b78 l     O .text	0000000c InitClkStates
1a001b84 l     O .text	00000060 pinmuxing
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_adc.c
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_datatypes.c
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a0013c8 l     F .text	00000034 gpioObtainPinConfig
00000000 l    df *ABS*	00000000 sapi_tick.c
00000000 l    df *ABS*	00000000 sapi_timer.c
1a001664 l     F .text	00000002 errorOcurred
1a001666 l     F .text	00000002 doNothing
10000018 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 
1a000300 l       .text	00000000 __CRP_WORD_END__
1a0002fc l       .text	00000000 __CRP_WORD_START__
1a00098c g     F .text	0000001c Chip_Clock_GetDividerSource
1a0016e8 g     F .text	00000044 TIMER2_IRQHandler
1a000184  w    F .text	00000002 DebugMon_Handler
1a00018a  w    F .text	00000002 RIT_IRQHandler
1a000630 g     F .text	00000016 Chip_ADC_DeInit
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0011f0 g     F .text	0000008c adcConfig
1a00018a  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a00018a  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a00018a  w    F .text	00000002 I2C0_IRQHandler
1a000d2a g     F .text	00000024 Chip_GPIO_SetDir
1a00017a  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a001640 g     F .text	00000024 SysTick_Handler
1000005b g     O .bss	00000001 secuenciaB
1000005e g     O .bss	00000002 valorADch1W
1a00018a  w    F .text	00000002 SDIO_IRQHandler
1a00018a  w    F .text	00000002 ATIMER_IRQHandler
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a001d24 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a00018a  w    F .text	00000002 I2C1_IRQHandler
1a00018a  w    F .text	00000002 UART1_IRQHandler
1a00018a  w    F .text	00000002 GPIO5_IRQHandler
1a00018a  w    F .text	00000002 CAN1_IRQHandler
10000000 g     O .data	0000000a numeroadisplayB
53ff6726 g       *ABS*	00000000 __valid_user_code_checksum
1a001d24 g       .ARM.exidx	00000000 _etext
1a00018a  w    F .text	00000002 USB1_IRQHandler
1a00018a  w    F .text	00000002 I2S0_IRQHandler
1a00172c g     F .text	00000044 TIMER3_IRQHandler
1a000c0a g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001bc g     F .text	00000002 UART0_IRQHandler
1a0001aa g     F .text	00000012 bss_init
1a00018a  w    F .text	00000002 SGPIO_IRQHandler
1a001774 g     F .text	00000000 .hidden __aeabi_uldivmod
10000080 g       .noinit	00000000 _noinit
1a00041c g     F .text	00000074 CONVIERTEWORD
10000068 g     O .bss	00000004 SystemCoreClock
1a000ed4 g     F .text	00000054 Chip_UART_Init
1a00018a  w    F .text	00000002 ADC0_IRQHandler
1a0005d8 g     F .text	00000018 readAdcVal
10000058 g     O .bss	00000001 centenasB
1a000180  w    F .text	00000002 UsageFault_Handler
1a000c88 g     F .text	0000004c Chip_Clock_GetRate
1a000358 g     F .text	000000c4 CONFIGDISPLAY
1a00018a  w    F .text	00000002 GPIO6_IRQHandler
10000070 g     O .bss	00000008 tickCounter
1a0010f0 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a0017a4 g     F .text	000002dc .hidden __udivmoddi4
1a001b64 g     O .text	00000004 ExtRateIn
1a00018a  w    F .text	00000002 IntDefaultHandler
1a00018a  w    F .text	00000002 GPIO1_IRQHandler
1a0015c8 g     F .text	00000078 tickConfig
1a00018a  w    F .text	00000002 SSP0_IRQHandler
1a0013fc g     F .text	00000174 gpioConfig
1a001d1c g       .text	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a0005ca g     F .text	0000000e setStartMode
1a00018a  w    F .text	00000002 ADC1_IRQHandler
1a001090 g     F .text	00000028 Board_Init
1a000114 g       .text	00000000 __data_section_table
1a00018a  w    F .text	00000002 RTC_IRQHandler
10000080 g       .bss	00000000 _ebss
1a0006f6 g     F .text	00000028 Chip_ADC_EnableChannel
1a001668 g     F .text	00000040 TIMER0_IRQHandler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a00018a  w    F .text	00000002 SPI_IRQHandler
1a00018a  w    F .text	00000002 LCD_IRQHandler
1a000940 g     F .text	0000004c Chip_Clock_EnableCrystal
1a0012d4 g     F .text	000000ee boardConfig
1a000646 g     F .text	00000008 Chip_ADC_ReadValue
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00018c g     F .text	0000001e data_init
1a0006a4 g     F .text	00000020 Chip_ADC_SetStartMode
1a0016a8 g     F .text	00000040 TIMER1_IRQHandler
1a001770 g     F .text	00000002 UART2_IRQHandler
1a000afc g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a0013c2 g     F .text	00000004 sAPI_NullFuncPtr
1a00018a  w    F .text	00000002 GPIO2_IRQHandler
1a00127c g     F .text	00000058 adcRead
1a000be4 g     F .text	00000026 Chip_Clock_GetBaseClock
10000058 g       .bss	00000000 _bss
1a00064e g     F .text	00000036 Chip_ADC_ReadStatus
1a0006c4 g     F .text	00000032 Chip_ADC_SetSampleRate
1a00018a  w    F .text	00000002 I2S1_IRQHandler
1a000490 g     F .text	000000d4 IntTimer
1a000d28 g     F .text	00000002 Chip_GPIO_Init
1a001b68 g     O .text	00000004 OscRateIn
10000080 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a00018a  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a001a80  w    F .text	00000002 .hidden __aeabi_ldiv0
1a00018a  w    F .text	00000002 USB0_IRQHandler
1a000c54 g     F .text	00000034 Chip_Clock_Disable
1a00018a  w    F .text	00000002 GPIO3_IRQHandler
1a00018a  w    F .text	00000002 SCT_IRQHandler
1a0009a8 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1000005c g     O .bss	00000001 unidadesB
1a001a84 g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000564 g     F .text	00000020 main
1a00018a  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1a00018a  w    F .text	00000002 GPIO7_IRQHandler
1a000c18 g     F .text	0000003c Chip_Clock_EnableOpts
1a001be4 g     O .text	00000136 gpioPinsConfig
1a0009c4 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a000cd4 g     F .text	00000054 fpuInit
1a000a7c g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a0011e4 g     F .text	0000000c SystemInit
1a00018a  w    F .text	00000002 SPIFI_IRQHandler
1a00018a  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a001570 g     F .text	00000056 gpioWrite
1a0005f0 g     F .text	00000040 Chip_ADC_Init
1a0010b8 g     F .text	00000038 Board_SetupMuxing
1a000f28 g     F .text	000000e8 Chip_UART_SetBaudFDR
10000078 g     O .bss	00000008 tickRateMS
1000000c g     O .data	00000008 segmentosdisplayB
1a00071e g     F .text	00000022 Chip_ADC_SetBurstCmd
1a00018a  w    F .text	00000002 ETH_IRQHandler
10000014 g     O .data	00000004 tickHookFunction
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a00018a  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a000300 g     F .text	00000058 SACANUMERO
10000080 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a00018a  w    F .text	00000002 GINT0_IRQHandler
1000005d g     O .bss	00000001 unidadesmilB
1a00018a  w    F .text	00000002 DAC_IRQHandler
10000059 g     O .bss	00000001 countproB
1a001068 g     F .text	00000028 Board_Debug_Init
1a000684 g     F .text	00000020 Chip_ADC_Int_SetChannelCmd
10000058 g       .data	00000000 _edata
1a00018a  w    F .text	00000002 M0SUB_IRQHandler
1a000d50 g     F .text	00000158 Chip_SetupCoreClock
1a00018a  w    F .text	00000002 GPIO0_IRQHandler
1a000000 g     O .text	00000114 g_pfnVectors
1a001168 g     F .text	0000007c ResetISR
1a000740 g     F .text	00000014 SystemCoreClockUpdate
1a00018a  w    F .text	00000002 DMA_IRQHandler
1a00018a  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a001a80  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a001772 g     F .text	00000002 UART3_IRQHandler
1a00018a  w    F .text	00000002 MCPWM_IRQHandler
1a00018a  w    F .text	00000002 M0APP_IRQHandler
1a00018a  w    F .text	00000002 GINT1_IRQHandler
1a001054 g     F .text	00000014 Board_UART_Init
1a000b8c g     F .text	00000058 Chip_Clock_SetBaseClock
1a00018a  w    F .text	00000002 GPIO4_IRQHandler
1a00115c g     F .text	0000000c Board_SystemInit
1000005a g     O .bss	00000001 decenasB



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 69 11 00 1a 79 01 00 1a 7b 01 00 1a     ....i...y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 26 67 ff 53     }...........&g.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	41 16 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     A...............
1a00004c:	00 00 00 00 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00005c:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00006c:	8b 01 00 1a 69 16 00 1a a9 16 00 1a e9 16 00 1a     ....i...........
1a00007c:	2d 17 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     -...............
1a00008c:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00009c:	8b 01 00 1a bd 01 00 1a 8b 01 00 1a 71 17 00 1a     ............q...
1a0000ac:	73 17 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     s...............
1a0000bc:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000cc:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000dc:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000ec:	8b 01 00 1a 00 00 00 00 8b 01 00 1a 8b 01 00 1a     ................
1a0000fc:	8b 01 00 1a 00 00 00 00 8b 01 00 1a 8b 01 00 1a     ................
1a00010c:	8b 01 00 1a 8b 01 00 1a                             ........

1a000114 <__data_section_table>:
1a000114:	1a001d24 	.word	0x1a001d24
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000058 	.word	0x00000058
1a000120:	1a001d24 	.word	0x1a001d24
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a001d24 	.word	0x1a001d24
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a001d24 	.word	0x1a001d24
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a001d24 	.word	0x1a001d24
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000058 	.word	0x10000058
1a000154:	00000028 	.word	0x00000028
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
//*****************************************************************************
// Default exception handlers. Override the ones here by defining your own
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <ADC0_IRQHandler>:
// Processor ends up here if an unexpected interrupt occurs or a specific
// handler is not present in the application code.
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a00018a:	e7fe      	b.n	1a00018a <ADC0_IRQHandler>

1a00018c <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018c:	2300      	movs	r3, #0
1a00018e:	4293      	cmp	r3, r2
1a000190:	d20a      	bcs.n	1a0001a8 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000192:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000194:	6804      	ldr	r4, [r0, #0]
1a000196:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000198:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a00019a:	3004      	adds	r0, #4
1a00019c:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019e:	4293      	cmp	r3, r2
1a0001a0:	d3f8      	bcc.n	1a000194 <data_init+0x8>
}
1a0001a2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a6:	4770      	bx	lr
1a0001a8:	4770      	bx	lr

1a0001aa <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001aa:	2300      	movs	r3, #0
1a0001ac:	e003      	b.n	1a0001b6 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b2:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b4:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b6:	428b      	cmp	r3, r1
1a0001b8:	d3f9      	bcc.n	1a0001ae <bss_init+0x4>
}
1a0001ba:	4770      	bx	lr

1a0001bc <UART0_IRQHandler>:
/*==================[ISR external functions definition]======================*/

__attribute__ ((section(".after_vectors")))

/* 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24) */
void UART0_IRQHandler(void){
1a0001bc:	4770      	bx	lr
1a0001be:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fe:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000202:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000206:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000212:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000216:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000222:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000226:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000232:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000236:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000242:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000246:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000252:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000256:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000262:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000266:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000272:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000276:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000282:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000286:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000292:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000296:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002aa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ae:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ba:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002be:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002fa:	Address 0x1a0002fa is out of bounds.


1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <SACANUMERO>:

//*************************************************************************************************
//			Actualiza un dígito
//*************************************************************************************************
void SACANUMERO(uint8_t numero, uint8_t lcdx)
{
1a000300:	b538      	push	{r3, r4, r5, lr}
1a000302:	4605      	mov	r5, r0
1a000304:	460c      	mov	r4, r1
uint8_t i = 0;

gpioWrite (LCD1, 1);
1a000306:	2101      	movs	r1, #1
1a000308:	2010      	movs	r0, #16
1a00030a:	f001 f931 	bl	1a001570 <gpioWrite>
gpioWrite (LCD2, 1);
1a00030e:	2101      	movs	r1, #1
1a000310:	2011      	movs	r0, #17
1a000312:	f001 f92d 	bl	1a001570 <gpioWrite>
gpioWrite (LCD3, 1);
1a000316:	2101      	movs	r1, #1
1a000318:	2012      	movs	r0, #18
1a00031a:	f001 f929 	bl	1a001570 <gpioWrite>
gpioWrite (LCD4, 1);
1a00031e:	2101      	movs	r1, #1
1a000320:	2014      	movs	r0, #20
1a000322:	f001 f925 	bl	1a001570 <gpioWrite>
gpioWrite (lcdx, 0);
1a000326:	2100      	movs	r1, #0
1a000328:	4620      	mov	r0, r4
1a00032a:	f001 f921 	bl	1a001570 <gpioWrite>

for (i=0; i<=7; i++)
1a00032e:	2400      	movs	r4, #0
1a000330:	e00b      	b.n	1a00034a <SACANUMERO+0x4a>
	gpioWrite (segmentosdisplayB[i], (numeroadisplayB[numero] & (1 << i)));
1a000332:	4b07      	ldr	r3, [pc, #28]	; (1a000350 <SACANUMERO+0x50>)
1a000334:	5759      	ldrsb	r1, [r3, r5]
1a000336:	2301      	movs	r3, #1
1a000338:	40a3      	lsls	r3, r4
1a00033a:	4019      	ands	r1, r3
1a00033c:	b2c9      	uxtb	r1, r1
1a00033e:	4b05      	ldr	r3, [pc, #20]	; (1a000354 <SACANUMERO+0x54>)
1a000340:	5d18      	ldrb	r0, [r3, r4]
1a000342:	f001 f915 	bl	1a001570 <gpioWrite>
for (i=0; i<=7; i++)
1a000346:	3401      	adds	r4, #1
1a000348:	b2e4      	uxtb	r4, r4
1a00034a:	2c07      	cmp	r4, #7
1a00034c:	d9f1      	bls.n	1a000332 <SACANUMERO+0x32>
}
1a00034e:	bd38      	pop	{r3, r4, r5, pc}
1a000350:	10000000 	.word	0x10000000
1a000354:	1000000c 	.word	0x1000000c

1a000358 <CONFIGDISPLAY>:

//*************************************************************************************************
//			Configura pines para los dígitos
//*************************************************************************************************
void CONFIGDISPLAY(void)
{
1a000358:	b508      	push	{r3, lr}
	gpioConfig (quedisplayB[i], GPIO_OUTPUT);
	gpioWrite (quedisplayB[i], 1);
	}
*/
	
gpioConfig (segmento_a, GPIO_OUTPUT);	
1a00035a:	2101      	movs	r1, #1
1a00035c:	2020      	movs	r0, #32
1a00035e:	f001 f84d 	bl	1a0013fc <gpioConfig>
gpioConfig (segmento_b, GPIO_OUTPUT);	
1a000362:	2101      	movs	r1, #1
1a000364:	200f      	movs	r0, #15
1a000366:	f001 f849 	bl	1a0013fc <gpioConfig>
gpioConfig (segmento_c, GPIO_OUTPUT);	
1a00036a:	2101      	movs	r1, #1
1a00036c:	201f      	movs	r0, #31
1a00036e:	f001 f845 	bl	1a0013fc <gpioConfig>
gpioConfig (segmento_d, GPIO_OUTPUT);	
1a000372:	2101      	movs	r1, #1
1a000374:	200e      	movs	r0, #14
1a000376:	f001 f841 	bl	1a0013fc <gpioConfig>
gpioConfig (segmento_e, GPIO_OUTPUT);	
1a00037a:	2101      	movs	r1, #1
1a00037c:	201e      	movs	r0, #30
1a00037e:	f001 f83d 	bl	1a0013fc <gpioConfig>
gpioConfig (segmento_f, GPIO_OUTPUT);	
1a000382:	2101      	movs	r1, #1
1a000384:	200d      	movs	r0, #13
1a000386:	f001 f839 	bl	1a0013fc <gpioConfig>
gpioConfig (segmento_g, GPIO_OUTPUT);	
1a00038a:	2101      	movs	r1, #1
1a00038c:	201d      	movs	r0, #29
1a00038e:	f001 f835 	bl	1a0013fc <gpioConfig>
gpioConfig (segmento_dp, GPIO_OUTPUT);
1a000392:	2101      	movs	r1, #1
1a000394:	200c      	movs	r0, #12
1a000396:	f001 f831 	bl	1a0013fc <gpioConfig>
gpioWrite (segmento_a, 1);	
1a00039a:	2101      	movs	r1, #1
1a00039c:	2020      	movs	r0, #32
1a00039e:	f001 f8e7 	bl	1a001570 <gpioWrite>
gpioWrite (segmento_b, 1);	
1a0003a2:	2101      	movs	r1, #1
1a0003a4:	200f      	movs	r0, #15
1a0003a6:	f001 f8e3 	bl	1a001570 <gpioWrite>
gpioWrite (segmento_c, 1);	
1a0003aa:	2101      	movs	r1, #1
1a0003ac:	201f      	movs	r0, #31
1a0003ae:	f001 f8df 	bl	1a001570 <gpioWrite>
gpioWrite (segmento_d, 1);	
1a0003b2:	2101      	movs	r1, #1
1a0003b4:	200e      	movs	r0, #14
1a0003b6:	f001 f8db 	bl	1a001570 <gpioWrite>
gpioWrite (segmento_e, 1);	
1a0003ba:	2101      	movs	r1, #1
1a0003bc:	201e      	movs	r0, #30
1a0003be:	f001 f8d7 	bl	1a001570 <gpioWrite>
gpioWrite (segmento_f, 1);	
1a0003c2:	2101      	movs	r1, #1
1a0003c4:	200d      	movs	r0, #13
1a0003c6:	f001 f8d3 	bl	1a001570 <gpioWrite>
gpioWrite (segmento_g, 1);	
1a0003ca:	2101      	movs	r1, #1
1a0003cc:	201d      	movs	r0, #29
1a0003ce:	f001 f8cf 	bl	1a001570 <gpioWrite>
gpioWrite (segmento_dp, 1);	
1a0003d2:	2101      	movs	r1, #1
1a0003d4:	200c      	movs	r0, #12
1a0003d6:	f001 f8cb 	bl	1a001570 <gpioWrite>

gpioConfig (digito_u, GPIO_OUTPUT);
1a0003da:	2101      	movs	r1, #1
1a0003dc:	2010      	movs	r0, #16
1a0003de:	f001 f80d 	bl	1a0013fc <gpioConfig>
gpioConfig (digito_d, GPIO_OUTPUT);
1a0003e2:	2101      	movs	r1, #1
1a0003e4:	2011      	movs	r0, #17
1a0003e6:	f001 f809 	bl	1a0013fc <gpioConfig>
gpioConfig (digito_c, GPIO_OUTPUT);
1a0003ea:	2101      	movs	r1, #1
1a0003ec:	2012      	movs	r0, #18
1a0003ee:	f001 f805 	bl	1a0013fc <gpioConfig>
gpioConfig (digito_um, GPIO_OUTPUT);
1a0003f2:	2101      	movs	r1, #1
1a0003f4:	2014      	movs	r0, #20
1a0003f6:	f001 f801 	bl	1a0013fc <gpioConfig>
gpioWrite (digito_u, 1);
1a0003fa:	2101      	movs	r1, #1
1a0003fc:	2010      	movs	r0, #16
1a0003fe:	f001 f8b7 	bl	1a001570 <gpioWrite>
gpioWrite (digito_d, 1);
1a000402:	2101      	movs	r1, #1
1a000404:	2011      	movs	r0, #17
1a000406:	f001 f8b3 	bl	1a001570 <gpioWrite>
gpioWrite (digito_c, 1);
1a00040a:	2101      	movs	r1, #1
1a00040c:	2012      	movs	r0, #18
1a00040e:	f001 f8af 	bl	1a001570 <gpioWrite>
gpioWrite (digito_um, 1);
1a000412:	2101      	movs	r1, #1
1a000414:	2014      	movs	r0, #20
1a000416:	f001 f8ab 	bl	1a001570 <gpioWrite>
1a00041a:	bd08      	pop	{r3, pc}

1a00041c <CONVIERTEWORD>:
//*************************************************************************************************
//
//*************************************************************************************************
void CONVIERTEWORD(uint16_t X, uint8_t *p)
{   
if (X)
1a00041c:	4602      	mov	r2, r0
1a00041e:	b930      	cbnz	r0, 1a00042e <CONVIERTEWORD+0x12>
	X = X%10;
	
	p[0] = X;
	}
else	{
	p[4] = 0;
1a000420:	2300      	movs	r3, #0
1a000422:	710b      	strb	r3, [r1, #4]
	p[3] = 0;
1a000424:	70cb      	strb	r3, [r1, #3]
	p[2] = 0;
1a000426:	708b      	strb	r3, [r1, #2]
	p[1] = 0;
1a000428:	704b      	strb	r3, [r1, #1]
	p[0] = 0;
1a00042a:	700b      	strb	r3, [r1, #0]
1a00042c:	4770      	bx	lr
	p[4] = X/10000;
1a00042e:	4b14      	ldr	r3, [pc, #80]	; (1a000480 <CONVIERTEWORD+0x64>)
1a000430:	fba3 0302 	umull	r0, r3, r3, r2
1a000434:	0b5b      	lsrs	r3, r3, #13
1a000436:	710b      	strb	r3, [r1, #4]
	X = X%10000;
1a000438:	f242 7010 	movw	r0, #10000	; 0x2710
1a00043c:	fb00 2313 	mls	r3, r0, r3, r2
1a000440:	b29a      	uxth	r2, r3
	p[3] = X/1000;
1a000442:	4b10      	ldr	r3, [pc, #64]	; (1a000484 <CONVIERTEWORD+0x68>)
1a000444:	fba3 0302 	umull	r0, r3, r3, r2
1a000448:	099b      	lsrs	r3, r3, #6
1a00044a:	70cb      	strb	r3, [r1, #3]
	X = X%1000;
1a00044c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a000450:	fb00 2313 	mls	r3, r0, r3, r2
1a000454:	b29a      	uxth	r2, r3
	p[2] = X/100;
1a000456:	4b0c      	ldr	r3, [pc, #48]	; (1a000488 <CONVIERTEWORD+0x6c>)
1a000458:	fba3 0302 	umull	r0, r3, r3, r2
1a00045c:	095b      	lsrs	r3, r3, #5
1a00045e:	708b      	strb	r3, [r1, #2]
	X = X%100;
1a000460:	2064      	movs	r0, #100	; 0x64
1a000462:	fb00 2313 	mls	r3, r0, r3, r2
1a000466:	b29b      	uxth	r3, r3
	p[1] = X/10;
1a000468:	4a08      	ldr	r2, [pc, #32]	; (1a00048c <CONVIERTEWORD+0x70>)
1a00046a:	fba2 0203 	umull	r0, r2, r2, r3
1a00046e:	08d2      	lsrs	r2, r2, #3
1a000470:	704a      	strb	r2, [r1, #1]
	X = X%10;
1a000472:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a000476:	0050      	lsls	r0, r2, #1
1a000478:	1a1b      	subs	r3, r3, r0
	p[0] = X;
1a00047a:	700b      	strb	r3, [r1, #0]
1a00047c:	4770      	bx	lr
1a00047e:	bf00      	nop
1a000480:	d1b71759 	.word	0xd1b71759
1a000484:	10624dd3 	.word	0x10624dd3
1a000488:	51eb851f 	.word	0x51eb851f
1a00048c:	cccccccd 	.word	0xcccccccd

1a000490 <IntTimer>:

//*************************************************************************************************
//			Interrupción cada 5ms
//*************************************************************************************************
bool_t IntTimer (void *ptr)
{
1a000490:	b530      	push	{r4, r5, lr}
1a000492:	b083      	sub	sp, #12





valorADch1W = valorADch1W + adcRead(CH1);
1a000494:	2041      	movs	r0, #65	; 0x41
1a000496:	f000 fef1 	bl	1a00127c <adcRead>
1a00049a:	4a2b      	ldr	r2, [pc, #172]	; (1a000548 <IntTimer+0xb8>)
1a00049c:	8813      	ldrh	r3, [r2, #0]
1a00049e:	4418      	add	r0, r3
1a0004a0:	b280      	uxth	r0, r0
1a0004a2:	8010      	strh	r0, [r2, #0]
countproB++;
1a0004a4:	4a29      	ldr	r2, [pc, #164]	; (1a00054c <IntTimer+0xbc>)
1a0004a6:	7813      	ldrb	r3, [r2, #0]
1a0004a8:	3301      	adds	r3, #1
1a0004aa:	b2db      	uxtb	r3, r3
1a0004ac:	7013      	strb	r3, [r2, #0]
if (countproB == 64)
1a0004ae:	2b40      	cmp	r3, #64	; 0x40
1a0004b0:	d007      	beq.n	1a0004c2 <IntTimer+0x32>





switch (secuenciaB){
1a0004b2:	4b27      	ldr	r3, [pc, #156]	; (1a000550 <IntTimer+0xc0>)
1a0004b4:	781b      	ldrb	r3, [r3, #0]
1a0004b6:	2b03      	cmp	r3, #3
1a0004b8:	d840      	bhi.n	1a00053c <IntTimer+0xac>
1a0004ba:	e8df f003 	tbb	[pc, r3]
1a0004be:	261c      	.short	0x261c
1a0004c0:	3a30      	.short	0x3a30
	countproB = 0;
1a0004c2:	2500      	movs	r5, #0
1a0004c4:	7015      	strb	r5, [r2, #0]
	valorADch1W = valorADch1W >> 6;
1a0004c6:	0980      	lsrs	r0, r0, #6
1a0004c8:	4c1f      	ldr	r4, [pc, #124]	; (1a000548 <IntTimer+0xb8>)
1a0004ca:	8020      	strh	r0, [r4, #0]
	CONVIERTEWORD (valorADch1W, valores);
1a0004cc:	4669      	mov	r1, sp
1a0004ce:	f7ff ffa5 	bl	1a00041c <CONVIERTEWORD>
	unidadesmilB = valores[3];
1a0004d2:	f89d 2003 	ldrb.w	r2, [sp, #3]
1a0004d6:	4b1f      	ldr	r3, [pc, #124]	; (1a000554 <IntTimer+0xc4>)
1a0004d8:	701a      	strb	r2, [r3, #0]
	centenasB = valores[2];
1a0004da:	f89d 2002 	ldrb.w	r2, [sp, #2]
1a0004de:	4b1e      	ldr	r3, [pc, #120]	; (1a000558 <IntTimer+0xc8>)
1a0004e0:	701a      	strb	r2, [r3, #0]
	decenasB = valores[1];
1a0004e2:	f89d 2001 	ldrb.w	r2, [sp, #1]
1a0004e6:	4b1d      	ldr	r3, [pc, #116]	; (1a00055c <IntTimer+0xcc>)
1a0004e8:	701a      	strb	r2, [r3, #0]
	unidadesB = valores[0];
1a0004ea:	f89d 2000 	ldrb.w	r2, [sp]
1a0004ee:	4b1c      	ldr	r3, [pc, #112]	; (1a000560 <IntTimer+0xd0>)
1a0004f0:	701a      	strb	r2, [r3, #0]
	valorADch1W = 0;
1a0004f2:	8025      	strh	r5, [r4, #0]
1a0004f4:	e7dd      	b.n	1a0004b2 <IntTimer+0x22>
	case 0:
		SACANUMERO (unidadesB, LCD1);
1a0004f6:	2110      	movs	r1, #16
1a0004f8:	4b19      	ldr	r3, [pc, #100]	; (1a000560 <IntTimer+0xd0>)
1a0004fa:	7818      	ldrb	r0, [r3, #0]
1a0004fc:	f7ff ff00 	bl	1a000300 <SACANUMERO>
		secuenciaB++;
1a000500:	4a13      	ldr	r2, [pc, #76]	; (1a000550 <IntTimer+0xc0>)
1a000502:	7813      	ldrb	r3, [r2, #0]
1a000504:	3301      	adds	r3, #1
1a000506:	7013      	strb	r3, [r2, #0]
		break;
1a000508:	e01b      	b.n	1a000542 <IntTimer+0xb2>
	case 1:
		SACANUMERO (decenasB, LCD2);
1a00050a:	2111      	movs	r1, #17
1a00050c:	4b13      	ldr	r3, [pc, #76]	; (1a00055c <IntTimer+0xcc>)
1a00050e:	7818      	ldrb	r0, [r3, #0]
1a000510:	f7ff fef6 	bl	1a000300 <SACANUMERO>
		secuenciaB++;
1a000514:	4a0e      	ldr	r2, [pc, #56]	; (1a000550 <IntTimer+0xc0>)
1a000516:	7813      	ldrb	r3, [r2, #0]
1a000518:	3301      	adds	r3, #1
1a00051a:	7013      	strb	r3, [r2, #0]
		break;
1a00051c:	e011      	b.n	1a000542 <IntTimer+0xb2>
	case 2:
		SACANUMERO (centenasB, LCD3);
1a00051e:	2112      	movs	r1, #18
1a000520:	4b0d      	ldr	r3, [pc, #52]	; (1a000558 <IntTimer+0xc8>)
1a000522:	7818      	ldrb	r0, [r3, #0]
1a000524:	f7ff feec 	bl	1a000300 <SACANUMERO>
		secuenciaB++;
1a000528:	4a09      	ldr	r2, [pc, #36]	; (1a000550 <IntTimer+0xc0>)
1a00052a:	7813      	ldrb	r3, [r2, #0]
1a00052c:	3301      	adds	r3, #1
1a00052e:	7013      	strb	r3, [r2, #0]
		break;
1a000530:	e007      	b.n	1a000542 <IntTimer+0xb2>
	case 3:
		SACANUMERO (unidadesmilB, LCD4);
1a000532:	2114      	movs	r1, #20
1a000534:	4b07      	ldr	r3, [pc, #28]	; (1a000554 <IntTimer+0xc4>)
1a000536:	7818      	ldrb	r0, [r3, #0]
1a000538:	f7ff fee2 	bl	1a000300 <SACANUMERO>
	
	default:
		secuenciaB = 0;
1a00053c:	2200      	movs	r2, #0
1a00053e:	4b04      	ldr	r3, [pc, #16]	; (1a000550 <IntTimer+0xc0>)
1a000540:	701a      	strb	r2, [r3, #0]
		break;
	}
	

return 1;
}
1a000542:	2001      	movs	r0, #1
1a000544:	b003      	add	sp, #12
1a000546:	bd30      	pop	{r4, r5, pc}
1a000548:	1000005e 	.word	0x1000005e
1a00054c:	10000059 	.word	0x10000059
1a000550:	1000005b 	.word	0x1000005b
1a000554:	1000005d 	.word	0x1000005d
1a000558:	10000058 	.word	0x10000058
1a00055c:	1000005a 	.word	0x1000005a
1a000560:	1000005c 	.word	0x1000005c

1a000564 <main>:


/*==================[función principal]======================================*/

// FUNCION PRINCIPAL, PUNTO DE ENTRADA AL PROGRAMA LUEGO DE ENCENDIDO O RESET.
int main( void ){
1a000564:	b508      	push	{r3, lr}
uint8_t i = 0;


// ---------- CONFIGURACIONES ------------------------------
// Inicializar y configurar la plataforma
boardConfig();   
1a000566:	f000 feb5 	bl	1a0012d4 <boardConfig>

// Interupcion cada 10ms.
tickConfig (5, IntTimer);
1a00056a:	4a05      	ldr	r2, [pc, #20]	; (1a000580 <main+0x1c>)
1a00056c:	2005      	movs	r0, #5
1a00056e:	2100      	movs	r1, #0
1a000570:	f001 f82a 	bl	1a0015c8 <tickConfig>

//Configura los pines que controlan los dígitos de 7 segmentos.
CONFIGDISPLAY();
1a000574:	f7ff fef0 	bl	1a000358 <CONFIGDISPLAY>

//Inicializa AD.
adcConfig (ADC_ENABLE);
1a000578:	2000      	movs	r0, #0
1a00057a:	f000 fe39 	bl	1a0011f0 <adcConfig>
1a00057e:	e7fe      	b.n	1a00057e <main+0x1a>
1a000580:	1a000491 	.word	0x1a000491

1a000584 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
   CHIP_CCU_CLK_T clkADC;

   if (pADC == LPC_ADC1) {
1a000584:	4b03      	ldr	r3, [pc, #12]	; (1a000594 <Chip_ADC_GetClockIndex+0x10>)
1a000586:	4298      	cmp	r0, r3
1a000588:	d001      	beq.n	1a00058e <Chip_ADC_GetClockIndex+0xa>
       clkADC = CLK_APB3_ADC1;
   }
   else {
       clkADC = CLK_APB3_ADC0;
1a00058a:	2003      	movs	r0, #3
   }

   return clkADC;
}
1a00058c:	4770      	bx	lr
       clkADC = CLK_APB3_ADC1;
1a00058e:	2004      	movs	r0, #4
1a000590:	4770      	bx	lr
1a000592:	bf00      	nop
1a000594:	400e4000 	.word	0x400e4000

1a000598 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a000598:	b570      	push	{r4, r5, r6, lr}
1a00059a:	460d      	mov	r5, r1
1a00059c:	4614      	mov	r4, r2
1a00059e:	461e      	mov	r6, r3
      A/D converter, which should be less than or equal to 4.5MHz.
      A fully conversion requires (bits_accuracy+1) of these clocks.
      ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
      ADC rate = ADC clock / (the number of clocks required for each conversion);
    */
   adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a0005a0:	f7ff fff0 	bl	1a000584 <Chip_ADC_GetClockIndex>
1a0005a4:	f000 fb70 	bl	1a000c88 <Chip_Clock_GetRate>
   if (burstMode) {
1a0005a8:	b965      	cbnz	r5, 1a0005c4 <getClkDiv+0x2c>
       fullAdcRate = adcRate * clks;
   }
   else {
       fullAdcRate = adcRate * getFullConvClk();
1a0005aa:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a0005ae:	eb04 0443 	add.w	r4, r4, r3, lsl #1
   }

   /* Get the round value by fomular: (2*A + B)/(2*B) */
   div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a0005b2:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a0005b6:	0064      	lsls	r4, r4, #1
1a0005b8:	fbb0 f0f4 	udiv	r0, r0, r4
1a0005bc:	b2c0      	uxtb	r0, r0
1a0005be:	3801      	subs	r0, #1
   return div;
}
1a0005c0:	b2c0      	uxtb	r0, r0
1a0005c2:	bd70      	pop	{r4, r5, r6, pc}
       fullAdcRate = adcRate * clks;
1a0005c4:	fb04 f406 	mul.w	r4, r4, r6
1a0005c8:	e7f3      	b.n	1a0005b2 <getClkDiv+0x1a>

1a0005ca <setStartMode>:

/* Set start mode for ADC */
void setStartMode(LPC_ADC_T *pADC, uint8_t start_mode)
{
   uint32_t temp;
   temp = pADC->CR & (~ADC_CR_START_MASK);
1a0005ca:	6803      	ldr	r3, [r0, #0]
1a0005cc:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
   pADC->CR = temp | (ADC_CR_START_MODE_SEL((uint32_t) start_mode));
1a0005d0:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
1a0005d4:	6001      	str	r1, [r0, #0]
1a0005d6:	4770      	bx	lr

1a0005d8 <readAdcVal>:

/* Get the ADC value */
Status readAdcVal(LPC_ADC_T *pADC, uint8_t channel, uint16_t *data)
{
   uint32_t temp;
   temp = pADC->DR[channel];
1a0005d8:	3104      	adds	r1, #4
1a0005da:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   if (!ADC_DR_DONE(temp)) {
1a0005de:	2b00      	cmp	r3, #0
1a0005e0:	db01      	blt.n	1a0005e6 <readAdcVal+0xe>
       return ERROR;
1a0005e2:	2000      	movs	r0, #0
   }
   /*  if(ADC_DR_OVERRUN(temp) && (pADC->CR & ADC_CR_BURST)) */
   /*  return ERROR; */
   *data = (uint16_t) ADC_DR_RESULT(temp);
   return SUCCESS;
}
1a0005e4:	4770      	bx	lr
   *data = (uint16_t) ADC_DR_RESULT(temp);
1a0005e6:	f3c3 1389 	ubfx	r3, r3, #6, #10
1a0005ea:	8013      	strh	r3, [r2, #0]
   return SUCCESS;
1a0005ec:	2001      	movs	r0, #1
1a0005ee:	4770      	bx	lr

1a0005f0 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a0005f0:	b538      	push	{r3, r4, r5, lr}
1a0005f2:	4605      	mov	r5, r0
1a0005f4:	460c      	mov	r4, r1
   uint8_t div;
   uint32_t cr = 0;
   uint32_t clk;

   Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a0005f6:	f7ff ffc5 	bl	1a000584 <Chip_ADC_GetClockIndex>
1a0005fa:	2301      	movs	r3, #1
1a0005fc:	461a      	mov	r2, r3
1a0005fe:	4619      	mov	r1, r3
1a000600:	f000 fb0a 	bl	1a000c18 <Chip_Clock_EnableOpts>

   pADC->INTEN = 0;        /* Disable all interrupts */
1a000604:	2100      	movs	r1, #0
1a000606:	60e9      	str	r1, [r5, #12]

   cr |= ADC_CR_PDN;
   ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a000608:	4a08      	ldr	r2, [pc, #32]	; (1a00062c <Chip_ADC_Init+0x3c>)
1a00060a:	6022      	str	r2, [r4, #0]
   ADCSetup->bitsAccuracy = ADC_10BITS;
1a00060c:	7121      	strb	r1, [r4, #4]
   clk = 11;
   ADCSetup->burstMode = false;
1a00060e:	7161      	strb	r1, [r4, #5]
   div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a000610:	230b      	movs	r3, #11
1a000612:	4628      	mov	r0, r5
1a000614:	f7ff ffc0 	bl	1a000598 <getClkDiv>
   cr |= ADC_CR_CLKDIV(div);
1a000618:	0200      	lsls	r0, r0, #8
1a00061a:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
   cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a00061e:	7923      	ldrb	r3, [r4, #4]
1a000620:	045b      	lsls	r3, r3, #17
1a000622:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a000626:	4318      	orrs	r0, r3
   pADC->CR = cr;
1a000628:	6028      	str	r0, [r5, #0]
1a00062a:	bd38      	pop	{r3, r4, r5, pc}
1a00062c:	00061a80 	.word	0x00061a80

1a000630 <Chip_ADC_DeInit>:
}

/* Shutdown ADC */
void Chip_ADC_DeInit(LPC_ADC_T *pADC)
{
1a000630:	b508      	push	{r3, lr}
   pADC->INTEN = 0x00000100;
1a000632:	f44f 7280 	mov.w	r2, #256	; 0x100
1a000636:	60c2      	str	r2, [r0, #12]
   pADC->CR = 0;
1a000638:	2200      	movs	r2, #0
1a00063a:	6002      	str	r2, [r0, #0]
   Chip_Clock_Disable(Chip_ADC_GetClockIndex(pADC));
1a00063c:	f7ff ffa2 	bl	1a000584 <Chip_ADC_GetClockIndex>
1a000640:	f000 fb08 	bl	1a000c54 <Chip_Clock_Disable>
1a000644:	bd08      	pop	{r3, pc}

1a000646 <Chip_ADC_ReadValue>:
}

/* Get the ADC value */
Status Chip_ADC_ReadValue(LPC_ADC_T *pADC, uint8_t channel, uint16_t *data)
{
1a000646:	b508      	push	{r3, lr}
   return readAdcVal(pADC, channel, data);
1a000648:	f7ff ffc6 	bl	1a0005d8 <readAdcVal>
}
1a00064c:	bd08      	pop	{r3, pc}

1a00064e <Chip_ADC_ReadStatus>:

/* Get ADC Channel status from ADC data register */
FlagStatus Chip_ADC_ReadStatus(LPC_ADC_T *pADC, uint8_t channel, uint32_t StatusType)
{
   switch (StatusType) {
1a00064e:	2a01      	cmp	r2, #1
1a000650:	d00a      	beq.n	1a000668 <Chip_ADC_ReadStatus+0x1a>
1a000652:	b11a      	cbz	r2, 1a00065c <Chip_ADC_ReadStatus+0xe>
1a000654:	2a02      	cmp	r2, #2
1a000656:	d00f      	beq.n	1a000678 <Chip_ADC_ReadStatus+0x2a>
       return pADC->STAT >> 16 ? SET : RESET;

   default:
       break;
   }
   return RESET;
1a000658:	2000      	movs	r0, #0
}
1a00065a:	4770      	bx	lr
       return (pADC->STAT & (1UL << channel)) ? SET : RESET;
1a00065c:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a00065e:	40c8      	lsrs	r0, r1
1a000660:	f000 0001 	and.w	r0, r0, #1
1a000664:	b2c0      	uxtb	r0, r0
1a000666:	4770      	bx	lr
       channel += 8;
1a000668:	3108      	adds	r1, #8
1a00066a:	b2c9      	uxtb	r1, r1
       return (pADC->STAT & (1UL << channel)) ? SET : RESET;
1a00066c:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a00066e:	40c8      	lsrs	r0, r1
1a000670:	f000 0001 	and.w	r0, r0, #1
1a000674:	b2c0      	uxtb	r0, r0
1a000676:	4770      	bx	lr
       return pADC->STAT >> 16 ? SET : RESET;
1a000678:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a00067a:	0c1b      	lsrs	r3, r3, #16
1a00067c:	bf14      	ite	ne
1a00067e:	2001      	movne	r0, #1
1a000680:	2000      	moveq	r0, #0
1a000682:	4770      	bx	lr

1a000684 <Chip_ADC_Int_SetChannelCmd>:

/* Enable/Disable interrupt for ADC channel */
void Chip_ADC_Int_SetChannelCmd(LPC_ADC_T *pADC, uint8_t channel, FunctionalState NewState)
{
   if (NewState == ENABLE) {
1a000684:	2a01      	cmp	r2, #1
1a000686:	d007      	beq.n	1a000698 <Chip_ADC_Int_SetChannelCmd+0x14>
       pADC->INTEN |= (1UL << channel);
   }
   else {
       pADC->INTEN &= (~(1UL << channel));
1a000688:	68c3      	ldr	r3, [r0, #12]
1a00068a:	2201      	movs	r2, #1
1a00068c:	fa02 f101 	lsl.w	r1, r2, r1
1a000690:	ea23 0101 	bic.w	r1, r3, r1
1a000694:	60c1      	str	r1, [r0, #12]
1a000696:	4770      	bx	lr
       pADC->INTEN |= (1UL << channel);
1a000698:	68c3      	ldr	r3, [r0, #12]
1a00069a:	fa02 f101 	lsl.w	r1, r2, r1
1a00069e:	4319      	orrs	r1, r3
1a0006a0:	60c1      	str	r1, [r0, #12]
1a0006a2:	4770      	bx	lr

1a0006a4 <Chip_ADC_SetStartMode>:
   }
}

/* Select the mode starting the AD conversion */
void Chip_ADC_SetStartMode(LPC_ADC_T *pADC, ADC_START_MODE_T mode, ADC_EDGE_CFG_T EdgeOption)
{
1a0006a4:	b508      	push	{r3, lr}
   if ((mode != ADC_START_NOW) && (mode != ADC_NO_START)) {
1a0006a6:	2901      	cmp	r1, #1
1a0006a8:	d904      	bls.n	1a0006b4 <Chip_ADC_SetStartMode+0x10>
       if (EdgeOption) {
1a0006aa:	b932      	cbnz	r2, 1a0006ba <Chip_ADC_SetStartMode+0x16>
           pADC->CR |= ADC_CR_EDGE;
       }
       else {
           pADC->CR &= ~ADC_CR_EDGE;
1a0006ac:	6803      	ldr	r3, [r0, #0]
1a0006ae:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
1a0006b2:	6003      	str	r3, [r0, #0]
       }
   }
   setStartMode(pADC, (uint8_t) mode);
1a0006b4:	f7ff ff89 	bl	1a0005ca <setStartMode>
1a0006b8:	bd08      	pop	{r3, pc}
           pADC->CR |= ADC_CR_EDGE;
1a0006ba:	6803      	ldr	r3, [r0, #0]
1a0006bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
1a0006c0:	6003      	str	r3, [r0, #0]
1a0006c2:	e7f7      	b.n	1a0006b4 <Chip_ADC_SetStartMode+0x10>

1a0006c4 <Chip_ADC_SetSampleRate>:
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a0006c4:	b570      	push	{r4, r5, r6, lr}
1a0006c6:	4605      	mov	r5, r0
1a0006c8:	460e      	mov	r6, r1
   uint8_t div;
   uint32_t cr;

   cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a0006ca:	6804      	ldr	r4, [r0, #0]
1a0006cc:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a0006d0:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
   ADCSetup->adcRate = rate;
1a0006d4:	600a      	str	r2, [r1, #0]
   div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a0006d6:	790b      	ldrb	r3, [r1, #4]
1a0006d8:	f1c3 030b 	rsb	r3, r3, #11
1a0006dc:	b2db      	uxtb	r3, r3
1a0006de:	7949      	ldrb	r1, [r1, #5]
1a0006e0:	f7ff ff5a 	bl	1a000598 <getClkDiv>
   cr |= ADC_CR_CLKDIV(div);
1a0006e4:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
   cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a0006e8:	7934      	ldrb	r4, [r6, #4]
1a0006ea:	0464      	lsls	r4, r4, #17
1a0006ec:	f404 2460 	and.w	r4, r4, #917504	; 0xe0000
1a0006f0:	4320      	orrs	r0, r4
   pADC->CR = cr;
1a0006f2:	6028      	str	r0, [r5, #0]
1a0006f4:	bd70      	pop	{r4, r5, r6, pc}

1a0006f6 <Chip_ADC_EnableChannel>:
}

/* Enable or disable the ADC channel on ADC peripheral */
void Chip_ADC_EnableChannel(LPC_ADC_T *pADC, ADC_CHANNEL_T channel, FunctionalState NewState)
{
   if (NewState == ENABLE) {
1a0006f6:	2a01      	cmp	r2, #1
1a0006f8:	d00b      	beq.n	1a000712 <Chip_ADC_EnableChannel+0x1c>
       pADC->CR |= ADC_CR_CH_SEL(channel);
   }
   else {
       pADC->CR &= ~ADC_CR_START_MASK;
1a0006fa:	6803      	ldr	r3, [r0, #0]
1a0006fc:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
1a000700:	6003      	str	r3, [r0, #0]
       pADC->CR &= ~ADC_CR_CH_SEL(channel);
1a000702:	6803      	ldr	r3, [r0, #0]
1a000704:	2201      	movs	r2, #1
1a000706:	fa02 f101 	lsl.w	r1, r2, r1
1a00070a:	ea23 0101 	bic.w	r1, r3, r1
1a00070e:	6001      	str	r1, [r0, #0]
1a000710:	4770      	bx	lr
       pADC->CR |= ADC_CR_CH_SEL(channel);
1a000712:	6803      	ldr	r3, [r0, #0]
1a000714:	fa02 f101 	lsl.w	r1, r2, r1
1a000718:	4319      	orrs	r1, r3
1a00071a:	6001      	str	r1, [r0, #0]
1a00071c:	4770      	bx	lr

1a00071e <Chip_ADC_SetBurstCmd>:
   }
}

/* Enable burst mode */
void Chip_ADC_SetBurstCmd(LPC_ADC_T *pADC, FunctionalState NewState)
{
1a00071e:	b538      	push	{r3, r4, r5, lr}
1a000720:	4604      	mov	r4, r0
1a000722:	460d      	mov	r5, r1
   setStartMode(pADC, ADC_NO_START);
1a000724:	2100      	movs	r1, #0
1a000726:	f7ff ff50 	bl	1a0005ca <setStartMode>

    if (NewState == DISABLE) {
1a00072a:	b125      	cbz	r5, 1a000736 <Chip_ADC_SetBurstCmd+0x18>
       pADC->CR &= ~ADC_CR_BURST;
   }
   else {
       pADC->CR |= ADC_CR_BURST;
1a00072c:	6823      	ldr	r3, [r4, #0]
1a00072e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
1a000732:	6023      	str	r3, [r4, #0]
1a000734:	bd38      	pop	{r3, r4, r5, pc}
       pADC->CR &= ~ADC_CR_BURST;
1a000736:	6823      	ldr	r3, [r4, #0]
1a000738:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
1a00073c:	6023      	str	r3, [r4, #0]
1a00073e:	bd38      	pop	{r3, r4, r5, pc}

1a000740 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a000740:	b508      	push	{r3, lr}
   /* CPU core speed */
   SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a000742:	2069      	movs	r0, #105	; 0x69
1a000744:	f000 faa0 	bl	1a000c88 <Chip_Clock_GetRate>
1a000748:	4b01      	ldr	r3, [pc, #4]	; (1a000750 <SystemCoreClockUpdate+0x10>)
1a00074a:	6018      	str	r0, [r3, #0]
1a00074c:	bd08      	pop	{r3, pc}
1a00074e:	bf00      	nop
1a000750:	10000068 	.word	0x10000068

1a000754 <pll_calc_divs>:
       return -val;
   return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000754:	b5f0      	push	{r4, r5, r6, r7, lr}

   uint32_t prev = freq;
   int n, m, p;

   /* When direct mode is set FBSEL should be a don't care */
   if (ppll->ctrl & (1 << 7)) {
1a000756:	680b      	ldr	r3, [r1, #0]
1a000758:	f013 0f80 	tst.w	r3, #128	; 0x80
1a00075c:	d002      	beq.n	1a000764 <pll_calc_divs+0x10>
       ppll->ctrl &= ~(1 << 6);
1a00075e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000762:	600b      	str	r3, [r1, #0]
1a000764:	4607      	mov	r7, r0
1a000766:	2501      	movs	r5, #1
1a000768:	e03b      	b.n	1a0007e2 <pll_calc_divs+0x8e>
           for (m = 1; m <= 256; m++) {
               uint32_t fcco, fout;
               if (ppll->ctrl & (1 << 6)) {
                   fcco = ((m << (p + 1)) * ppll->fin) / n;
               } else {
                   fcco = (m * ppll->fin) / n;
1a00076a:	694b      	ldr	r3, [r1, #20]
1a00076c:	fb03 f302 	mul.w	r3, r3, r2
1a000770:	fbb3 f3f5 	udiv	r3, r3, r5
1a000774:	e014      	b.n	1a0007a0 <pll_calc_divs+0x4c>
               }
               if (fcco < PLL_MIN_CCO_FREQ) continue;
               if (fcco > PLL_MAX_CCO_FREQ) break;
               if (ppll->ctrl & (1 << 7)) {
                   fout = fcco;
1a000776:	461c      	mov	r4, r3
1a000778:	e020      	b.n	1a0007bc <pll_calc_divs+0x68>
       return -val;
1a00077a:	f1ce 0e00 	rsb	lr, lr, #0
1a00077e:	e020      	b.n	1a0007c2 <pll_calc_divs+0x6e>
           for (m = 1; m <= 256; m++) {
1a000780:	3201      	adds	r2, #1
1a000782:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a000786:	dc26      	bgt.n	1a0007d6 <pll_calc_divs+0x82>
               if (ppll->ctrl & (1 << 6)) {
1a000788:	680c      	ldr	r4, [r1, #0]
1a00078a:	f014 0f40 	tst.w	r4, #64	; 0x40
1a00078e:	d0ec      	beq.n	1a00076a <pll_calc_divs+0x16>
                   fcco = ((m << (p + 1)) * ppll->fin) / n;
1a000790:	1c73      	adds	r3, r6, #1
1a000792:	fa02 fe03 	lsl.w	lr, r2, r3
1a000796:	694b      	ldr	r3, [r1, #20]
1a000798:	fb03 f30e 	mul.w	r3, r3, lr
1a00079c:	fbb3 f3f5 	udiv	r3, r3, r5
               if (fcco < PLL_MIN_CCO_FREQ) continue;
1a0007a0:	f8df e048 	ldr.w	lr, [pc, #72]	; 1a0007ec <pll_calc_divs+0x98>
1a0007a4:	4573      	cmp	r3, lr
1a0007a6:	d9eb      	bls.n	1a000780 <pll_calc_divs+0x2c>
               if (fcco > PLL_MAX_CCO_FREQ) break;
1a0007a8:	f8df e044 	ldr.w	lr, [pc, #68]	; 1a0007f0 <pll_calc_divs+0x9c>
1a0007ac:	4573      	cmp	r3, lr
1a0007ae:	d812      	bhi.n	1a0007d6 <pll_calc_divs+0x82>
               if (ppll->ctrl & (1 << 7)) {
1a0007b0:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0007b4:	d1df      	bne.n	1a000776 <pll_calc_divs+0x22>
               } else {
                   fout = fcco >> (p + 1);
1a0007b6:	1c74      	adds	r4, r6, #1
1a0007b8:	fa23 f404 	lsr.w	r4, r3, r4
   if (val < 0)
1a0007bc:	ebb0 0e04 	subs.w	lr, r0, r4
1a0007c0:	d4db      	bmi.n	1a00077a <pll_calc_divs+0x26>
               }

               if (ABS(freq - fout) < prev) {
1a0007c2:	4577      	cmp	r7, lr
1a0007c4:	d9dc      	bls.n	1a000780 <pll_calc_divs+0x2c>
                   ppll->nsel = n;
1a0007c6:	608d      	str	r5, [r1, #8]
                   ppll->psel = p + 1;
1a0007c8:	1c77      	adds	r7, r6, #1
1a0007ca:	60cf      	str	r7, [r1, #12]
                   ppll->msel = m;
1a0007cc:	610a      	str	r2, [r1, #16]
                   ppll->fout = fout;
1a0007ce:	618c      	str	r4, [r1, #24]
                   ppll->fcco = fcco;
1a0007d0:	61cb      	str	r3, [r1, #28]
                   prev = ABS(freq - fout);
1a0007d2:	4677      	mov	r7, lr
1a0007d4:	e7d4      	b.n	1a000780 <pll_calc_divs+0x2c>
       for (p = 0; p < 4; p ++) {
1a0007d6:	3601      	adds	r6, #1
1a0007d8:	2e03      	cmp	r6, #3
1a0007da:	dc01      	bgt.n	1a0007e0 <pll_calc_divs+0x8c>
1a0007dc:	2201      	movs	r2, #1
1a0007de:	e7d0      	b.n	1a000782 <pll_calc_divs+0x2e>
   for (n = 1; n <= 4; n++) {
1a0007e0:	3501      	adds	r5, #1
1a0007e2:	2d04      	cmp	r5, #4
1a0007e4:	dc01      	bgt.n	1a0007ea <pll_calc_divs+0x96>
1a0007e6:	2600      	movs	r6, #0
1a0007e8:	e7f6      	b.n	1a0007d8 <pll_calc_divs+0x84>
               }
           }
       }
   }
}
1a0007ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a0007ec:	094c5eff 	.word	0x094c5eff
1a0007f0:	1312d000 	.word	0x1312d000

1a0007f4 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0007f4:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0007f6:	b099      	sub	sp, #100	; 0x64
1a0007f8:	4605      	mov	r5, r0
1a0007fa:	460c      	mov	r4, r1
   int diff[3];
   PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a0007fc:	2260      	movs	r2, #96	; 0x60
1a0007fe:	2100      	movs	r1, #0
1a000800:	4668      	mov	r0, sp
1a000802:	f001 f93f 	bl	1a001a84 <memset>

   /* Try direct mode */
   pll[0].ctrl |= (1 << 7);
1a000806:	2380      	movs	r3, #128	; 0x80
1a000808:	9300      	str	r3, [sp, #0]
   pll[0].fin = ppll->fin;
1a00080a:	6963      	ldr	r3, [r4, #20]
1a00080c:	9305      	str	r3, [sp, #20]
   pll[0].srcin = ppll->srcin;
1a00080e:	7923      	ldrb	r3, [r4, #4]
1a000810:	f88d 3004 	strb.w	r3, [sp, #4]
   pll_calc_divs(freq, &pll[0]);
1a000814:	4669      	mov	r1, sp
1a000816:	4628      	mov	r0, r5
1a000818:	f7ff ff9c 	bl	1a000754 <pll_calc_divs>
   if (pll[0].fout == freq) {
1a00081c:	9b06      	ldr	r3, [sp, #24]
1a00081e:	429d      	cmp	r5, r3
1a000820:	d02f      	beq.n	1a000882 <pll_get_frac+0x8e>
   if (val < 0)
1a000822:	1aeb      	subs	r3, r5, r3
1a000824:	d436      	bmi.n	1a000894 <pll_get_frac+0xa0>
       *ppll = pll[0];
       return ;
   }
   diff[0] = ABS(freq - pll[0].fout);
1a000826:	461e      	mov	r6, r3

   /* Try non-Integer mode */
   pll[2].ctrl = (1 << 6);
1a000828:	2340      	movs	r3, #64	; 0x40
1a00082a:	9310      	str	r3, [sp, #64]	; 0x40
   pll[2].fin = ppll->fin;
1a00082c:	6963      	ldr	r3, [r4, #20]
1a00082e:	9315      	str	r3, [sp, #84]	; 0x54
   pll[2].srcin = ppll->srcin;
1a000830:	7923      	ldrb	r3, [r4, #4]
1a000832:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
   pll_calc_divs(freq, &pll[2]);
1a000836:	a910      	add	r1, sp, #64	; 0x40
1a000838:	4628      	mov	r0, r5
1a00083a:	f7ff ff8b 	bl	1a000754 <pll_calc_divs>
   if (pll[2].fout == freq) {
1a00083e:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a000840:	429d      	cmp	r5, r3
1a000842:	d029      	beq.n	1a000898 <pll_get_frac+0xa4>
   if (val < 0)
1a000844:	1aeb      	subs	r3, r5, r3
1a000846:	d42f      	bmi.n	1a0008a8 <pll_get_frac+0xb4>
       *ppll = pll[2];
       return ;
   }

   diff[2] = ABS(freq - pll[2].fout);
1a000848:	461f      	mov	r7, r3
   /* Try integer mode */
   pll[1].ctrl = (1 << 6);
1a00084a:	2340      	movs	r3, #64	; 0x40
1a00084c:	9308      	str	r3, [sp, #32]
   pll[1].fin = ppll->fin;
1a00084e:	6963      	ldr	r3, [r4, #20]
1a000850:	930d      	str	r3, [sp, #52]	; 0x34
   pll[1].srcin = ppll->srcin;
1a000852:	7923      	ldrb	r3, [r4, #4]
1a000854:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   pll_calc_divs(freq, &pll[1]);
1a000858:	a908      	add	r1, sp, #32
1a00085a:	4628      	mov	r0, r5
1a00085c:	f7ff ff7a 	bl	1a000754 <pll_calc_divs>
   if (pll[1].fout == freq) {
1a000860:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a000862:	429d      	cmp	r5, r3
1a000864:	d022      	beq.n	1a0008ac <pll_get_frac+0xb8>
   if (val < 0)
1a000866:	1aed      	subs	r5, r5, r3
1a000868:	d428      	bmi.n	1a0008bc <pll_get_frac+0xc8>
       return ;
   }
   diff[1] = ABS(freq - pll[1].fout);

   /* Find the min of 3 and return */
   if (diff[0] <= diff[1]) {
1a00086a:	42ae      	cmp	r6, r5
1a00086c:	dc30      	bgt.n	1a0008d0 <pll_get_frac+0xdc>
       if (diff[0] <= diff[2]) {
1a00086e:	42be      	cmp	r6, r7
1a000870:	dc26      	bgt.n	1a0008c0 <pll_get_frac+0xcc>
           *ppll = pll[0];
1a000872:	466d      	mov	r5, sp
1a000874:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000876:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000878:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00087c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000880:	e006      	b.n	1a000890 <pll_get_frac+0x9c>
       *ppll = pll[0];
1a000882:	466d      	mov	r5, sp
1a000884:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000886:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000888:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00088c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
           *ppll = pll[1];
       } else {
           *ppll = pll[2];
       }
   }
}
1a000890:	b019      	add	sp, #100	; 0x64
1a000892:	bdf0      	pop	{r4, r5, r6, r7, pc}
       return -val;
1a000894:	425b      	negs	r3, r3
1a000896:	e7c6      	b.n	1a000826 <pll_get_frac+0x32>
       *ppll = pll[2];
1a000898:	ad10      	add	r5, sp, #64	; 0x40
1a00089a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00089c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00089e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0008a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
       return ;
1a0008a6:	e7f3      	b.n	1a000890 <pll_get_frac+0x9c>
       return -val;
1a0008a8:	425b      	negs	r3, r3
1a0008aa:	e7cd      	b.n	1a000848 <pll_get_frac+0x54>
       *ppll = pll[1];
1a0008ac:	ad08      	add	r5, sp, #32
1a0008ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0008b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0008b2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0008b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
       return ;
1a0008ba:	e7e9      	b.n	1a000890 <pll_get_frac+0x9c>
       return -val;
1a0008bc:	426d      	negs	r5, r5
1a0008be:	e7d4      	b.n	1a00086a <pll_get_frac+0x76>
           *ppll = pll[2];
1a0008c0:	ad10      	add	r5, sp, #64	; 0x40
1a0008c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0008c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0008c6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0008ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0008ce:	e7df      	b.n	1a000890 <pll_get_frac+0x9c>
       if (diff[1] <= diff[2]) {
1a0008d0:	42af      	cmp	r7, r5
1a0008d2:	db07      	blt.n	1a0008e4 <pll_get_frac+0xf0>
           *ppll = pll[1];
1a0008d4:	ad08      	add	r5, sp, #32
1a0008d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0008d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0008da:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0008de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0008e2:	e7d5      	b.n	1a000890 <pll_get_frac+0x9c>
           *ppll = pll[2];
1a0008e4:	ad10      	add	r5, sp, #64	; 0x40
1a0008e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0008e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0008ea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0008ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0008f2:	e7cd      	b.n	1a000890 <pll_get_frac+0x9c>

1a0008f4 <Chip_Clock_FindBaseClock>:
   return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a0008f4:	b430      	push	{r4, r5}
1a0008f6:	4605      	mov	r5, r0
   CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
   int i = 0;
1a0008f8:	2300      	movs	r3, #0
   CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a0008fa:	201c      	movs	r0, #28

   while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0008fc:	e000      	b.n	1a000900 <Chip_Clock_FindBaseClock+0xc>
       if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
           baseclk = periph_to_base[i].clkbase;
       }
       else {
           i++;
1a0008fe:	3301      	adds	r3, #1
   while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000900:	281c      	cmp	r0, #28
1a000902:	d118      	bne.n	1a000936 <Chip_Clock_FindBaseClock+0x42>
1a000904:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000908:	0051      	lsls	r1, r2, #1
1a00090a:	4a0c      	ldr	r2, [pc, #48]	; (1a00093c <Chip_Clock_FindBaseClock+0x48>)
1a00090c:	440a      	add	r2, r1
1a00090e:	7914      	ldrb	r4, [r2, #4]
1a000910:	42a0      	cmp	r0, r4
1a000912:	d010      	beq.n	1a000936 <Chip_Clock_FindBaseClock+0x42>
       if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a000914:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a000918:	004a      	lsls	r2, r1, #1
1a00091a:	4908      	ldr	r1, [pc, #32]	; (1a00093c <Chip_Clock_FindBaseClock+0x48>)
1a00091c:	5a8a      	ldrh	r2, [r1, r2]
1a00091e:	42aa      	cmp	r2, r5
1a000920:	d8ed      	bhi.n	1a0008fe <Chip_Clock_FindBaseClock+0xa>
1a000922:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000926:	0051      	lsls	r1, r2, #1
1a000928:	4a04      	ldr	r2, [pc, #16]	; (1a00093c <Chip_Clock_FindBaseClock+0x48>)
1a00092a:	440a      	add	r2, r1
1a00092c:	8852      	ldrh	r2, [r2, #2]
1a00092e:	4295      	cmp	r5, r2
1a000930:	d8e5      	bhi.n	1a0008fe <Chip_Clock_FindBaseClock+0xa>
           baseclk = periph_to_base[i].clkbase;
1a000932:	4620      	mov	r0, r4
1a000934:	e7e4      	b.n	1a000900 <Chip_Clock_FindBaseClock+0xc>
       }
   }

   return baseclk;
}
1a000936:	bc30      	pop	{r4, r5}
1a000938:	4770      	bx	lr
1a00093a:	bf00      	nop
1a00093c:	1a001aa0 	.word	0x1a001aa0

1a000940 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a000940:	b082      	sub	sp, #8
   volatile uint32_t delay = 1000;
1a000942:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a000946:	9301      	str	r3, [sp, #4]

   uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a000948:	4a0d      	ldr	r2, [pc, #52]	; (1a000980 <Chip_Clock_EnableCrystal+0x40>)
1a00094a:	6993      	ldr	r3, [r2, #24]

   /* Clear bypass mode */
   OldCrystalConfig &= (~2);
1a00094c:	f023 0102 	bic.w	r1, r3, #2
   if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a000950:	6992      	ldr	r2, [r2, #24]
1a000952:	4291      	cmp	r1, r2
1a000954:	d001      	beq.n	1a00095a <Chip_Clock_EnableCrystal+0x1a>
       LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000956:	4a0a      	ldr	r2, [pc, #40]	; (1a000980 <Chip_Clock_EnableCrystal+0x40>)
1a000958:	6191      	str	r1, [r2, #24]
   }

   /* Enable crystal oscillator */
   OldCrystalConfig &= (~1);
1a00095a:	f023 0303 	bic.w	r3, r3, #3
   if (OscRateIn >= 20000000) {
1a00095e:	4a09      	ldr	r2, [pc, #36]	; (1a000984 <Chip_Clock_EnableCrystal+0x44>)
1a000960:	6811      	ldr	r1, [r2, #0]
1a000962:	4a09      	ldr	r2, [pc, #36]	; (1a000988 <Chip_Clock_EnableCrystal+0x48>)
1a000964:	4291      	cmp	r1, r2
1a000966:	d901      	bls.n	1a00096c <Chip_Clock_EnableCrystal+0x2c>
       OldCrystalConfig |= 4;  /* Set high frequency mode */
1a000968:	f043 0304 	orr.w	r3, r3, #4

   }
   LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a00096c:	4a04      	ldr	r2, [pc, #16]	; (1a000980 <Chip_Clock_EnableCrystal+0x40>)
1a00096e:	6193      	str	r3, [r2, #24]

   /* Delay for 250uSec */
   while(delay--) {}
1a000970:	9b01      	ldr	r3, [sp, #4]
1a000972:	1e5a      	subs	r2, r3, #1
1a000974:	9201      	str	r2, [sp, #4]
1a000976:	2b00      	cmp	r3, #0
1a000978:	d1fa      	bne.n	1a000970 <Chip_Clock_EnableCrystal+0x30>
}
1a00097a:	b002      	add	sp, #8
1a00097c:	4770      	bx	lr
1a00097e:	bf00      	nop
1a000980:	40050000 	.word	0x40050000
1a000984:	1a001b68 	.word	0x1a001b68
1a000988:	01312cff 	.word	0x01312cff

1a00098c <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
   uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a00098c:	3012      	adds	r0, #18
1a00098e:	4b05      	ldr	r3, [pc, #20]	; (1a0009a4 <Chip_Clock_GetDividerSource+0x18>)
1a000990:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

   if (reg & 1) {  /* divider is powered down */
1a000994:	f010 0f01 	tst.w	r0, #1
1a000998:	d001      	beq.n	1a00099e <Chip_Clock_GetDividerSource+0x12>
       return CLKINPUT_PD;
1a00099a:	2011      	movs	r0, #17
   }

   return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a00099c:	4770      	bx	lr
   return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a00099e:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0009a2:	4770      	bx	lr
1a0009a4:	40050000 	.word	0x40050000

1a0009a8 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
   return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a0009a8:	f100 0212 	add.w	r2, r0, #18
1a0009ac:	4b03      	ldr	r3, [pc, #12]	; (1a0009bc <Chip_Clock_GetDividerDivisor+0x14>)
1a0009ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a0009b2:	4b03      	ldr	r3, [pc, #12]	; (1a0009c0 <Chip_Clock_GetDividerDivisor+0x18>)
1a0009b4:	5c18      	ldrb	r0, [r3, r0]
}
1a0009b6:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a0009ba:	4770      	bx	lr
1a0009bc:	40050000 	.word	0x40050000
1a0009c0:	1a001a98 	.word	0x1a001a98

1a0009c4 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a0009c4:	b508      	push	{r3, lr}
   uint32_t rate = 0;

   switch (input) {
1a0009c6:	2810      	cmp	r0, #16
1a0009c8:	d80a      	bhi.n	1a0009e0 <Chip_Clock_GetClockInputHz+0x1c>
1a0009ca:	e8df f000 	tbb	[pc, r0]
1a0009ce:	0b44      	.short	0x0b44
1a0009d0:	0921180d 	.word	0x0921180d
1a0009d4:	2d2a2724 	.word	0x2d2a2724
1a0009d8:	34300909 	.word	0x34300909
1a0009dc:	3c38      	.short	0x3c38
1a0009de:	40          	.byte	0x40
1a0009df:	00          	.byte	0x00
   uint32_t rate = 0;
1a0009e0:	2000      	movs	r0, #0
1a0009e2:	bd08      	pop	{r3, pc}
   case CLKIN_32K:
       rate = CRYSTAL_32K_FREQ_IN;
       break;

   case CLKIN_IRC:
       rate = CGU_IRC_FREQ;
1a0009e4:	481e      	ldr	r0, [pc, #120]	; (1a000a60 <Chip_Clock_GetClockInputHz+0x9c>)
       break;
1a0009e6:	bd08      	pop	{r3, pc}

   case CLKIN_ENET_RX:
       if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a0009e8:	4b1e      	ldr	r3, [pc, #120]	; (1a000a64 <Chip_Clock_GetClockInputHz+0xa0>)
1a0009ea:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0009ee:	f003 0307 	and.w	r3, r3, #7
1a0009f2:	2b04      	cmp	r3, #4
1a0009f4:	d001      	beq.n	1a0009fa <Chip_Clock_GetClockInputHz+0x36>
           /* MII mode requires 25MHz clock */
           rate = 25000000;
1a0009f6:	481c      	ldr	r0, [pc, #112]	; (1a000a68 <Chip_Clock_GetClockInputHz+0xa4>)
1a0009f8:	bd08      	pop	{r3, pc}
   uint32_t rate = 0;
1a0009fa:	2000      	movs	r0, #0
1a0009fc:	bd08      	pop	{r3, pc}
       }
       break;

   case CLKIN_ENET_TX:
       if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a0009fe:	4b19      	ldr	r3, [pc, #100]	; (1a000a64 <Chip_Clock_GetClockInputHz+0xa0>)
1a000a00:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000a04:	f003 0307 	and.w	r3, r3, #7
1a000a08:	2b04      	cmp	r3, #4
1a000a0a:	d027      	beq.n	1a000a5c <Chip_Clock_GetClockInputHz+0x98>
           rate = 25000000; /* MII uses 25 MHz */
1a000a0c:	4816      	ldr	r0, [pc, #88]	; (1a000a68 <Chip_Clock_GetClockInputHz+0xa4>)
1a000a0e:	bd08      	pop	{r3, pc}
           rate = 50000000; /* RMII uses 50 MHz */
       }
       break;

   case CLKIN_CLKIN:
       rate = ExtRateIn;
1a000a10:	4b16      	ldr	r3, [pc, #88]	; (1a000a6c <Chip_Clock_GetClockInputHz+0xa8>)
1a000a12:	6818      	ldr	r0, [r3, #0]
       break;
1a000a14:	bd08      	pop	{r3, pc}

   case CLKIN_CRYSTAL:
       rate = OscRateIn;
1a000a16:	4b16      	ldr	r3, [pc, #88]	; (1a000a70 <Chip_Clock_GetClockInputHz+0xac>)
1a000a18:	6818      	ldr	r0, [r3, #0]
       break;
1a000a1a:	bd08      	pop	{r3, pc}

   case CLKIN_USBPLL:
       rate = audio_usb_pll_freq[CGU_USB_PLL];
1a000a1c:	4b15      	ldr	r3, [pc, #84]	; (1a000a74 <Chip_Clock_GetClockInputHz+0xb0>)
1a000a1e:	6818      	ldr	r0, [r3, #0]
       break;
1a000a20:	bd08      	pop	{r3, pc}

   case CLKIN_AUDIOPLL:
       rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a000a22:	4b14      	ldr	r3, [pc, #80]	; (1a000a74 <Chip_Clock_GetClockInputHz+0xb0>)
1a000a24:	6858      	ldr	r0, [r3, #4]
       break;
1a000a26:	bd08      	pop	{r3, pc}

   case CLKIN_MAINPLL:
       rate = Chip_Clock_GetMainPLLHz();
1a000a28:	f000 f868 	bl	1a000afc <Chip_Clock_GetMainPLLHz>
       break;
1a000a2c:	bd08      	pop	{r3, pc}

   case CLKIN_IDIVA:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a000a2e:	2100      	movs	r1, #0
1a000a30:	f000 f89a 	bl	1a000b68 <Chip_Clock_GetDivRate>
       break;
1a000a34:	bd08      	pop	{r3, pc}

   case CLKIN_IDIVB:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a000a36:	2101      	movs	r1, #1
1a000a38:	f000 f896 	bl	1a000b68 <Chip_Clock_GetDivRate>
       break;
1a000a3c:	bd08      	pop	{r3, pc}

   case CLKIN_IDIVC:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a000a3e:	2102      	movs	r1, #2
1a000a40:	f000 f892 	bl	1a000b68 <Chip_Clock_GetDivRate>
       break;
1a000a44:	bd08      	pop	{r3, pc}

   case CLKIN_IDIVD:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a000a46:	2103      	movs	r1, #3
1a000a48:	f000 f88e 	bl	1a000b68 <Chip_Clock_GetDivRate>
       break;
1a000a4c:	bd08      	pop	{r3, pc}

   case CLKIN_IDIVE:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a000a4e:	2104      	movs	r1, #4
1a000a50:	f000 f88a 	bl	1a000b68 <Chip_Clock_GetDivRate>
       break;
1a000a54:	bd08      	pop	{r3, pc}
       rate = CRYSTAL_32K_FREQ_IN;
1a000a56:	f44f 4000 	mov.w	r0, #32768	; 0x8000
1a000a5a:	bd08      	pop	{r3, pc}
           rate = 50000000; /* RMII uses 50 MHz */
1a000a5c:	4806      	ldr	r0, [pc, #24]	; (1a000a78 <Chip_Clock_GetClockInputHz+0xb4>)
   default:
       break;
   }

   return rate;
}
1a000a5e:	bd08      	pop	{r3, pc}
1a000a60:	00b71b00 	.word	0x00b71b00
1a000a64:	40043000 	.word	0x40043000
1a000a68:	017d7840 	.word	0x017d7840
1a000a6c:	1a001b64 	.word	0x1a001b64
1a000a70:	1a001b68 	.word	0x1a001b68
1a000a74:	10000060 	.word	0x10000060
1a000a78:	02faf080 	.word	0x02faf080

1a000a7c <Chip_Clock_CalcMainPLLValue>:
{
1a000a7c:	b538      	push	{r3, r4, r5, lr}
1a000a7e:	4605      	mov	r5, r0
1a000a80:	460c      	mov	r4, r1
   ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a000a82:	7908      	ldrb	r0, [r1, #4]
1a000a84:	f7ff ff9e 	bl	1a0009c4 <Chip_Clock_GetClockInputHz>
1a000a88:	6160      	str	r0, [r4, #20]
   if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a000a8a:	4b19      	ldr	r3, [pc, #100]	; (1a000af0 <Chip_Clock_CalcMainPLLValue+0x74>)
1a000a8c:	442b      	add	r3, r5
1a000a8e:	4a19      	ldr	r2, [pc, #100]	; (1a000af4 <Chip_Clock_CalcMainPLLValue+0x78>)
1a000a90:	4293      	cmp	r3, r2
1a000a92:	d821      	bhi.n	1a000ad8 <Chip_Clock_CalcMainPLLValue+0x5c>
1a000a94:	b318      	cbz	r0, 1a000ade <Chip_Clock_CalcMainPLLValue+0x62>
   ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a000a96:	2380      	movs	r3, #128	; 0x80
1a000a98:	6023      	str	r3, [r4, #0]
   ppll->nsel = 0;
1a000a9a:	2300      	movs	r3, #0
1a000a9c:	60a3      	str	r3, [r4, #8]
   ppll->psel = 0;
1a000a9e:	60e3      	str	r3, [r4, #12]
   ppll->msel = freq / ppll->fin;
1a000aa0:	fbb5 f3f0 	udiv	r3, r5, r0
1a000aa4:	6123      	str	r3, [r4, #16]
   if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a000aa6:	4a14      	ldr	r2, [pc, #80]	; (1a000af8 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a000aa8:	4295      	cmp	r5, r2
1a000aaa:	d903      	bls.n	1a000ab4 <Chip_Clock_CalcMainPLLValue+0x38>
1a000aac:	fb03 f000 	mul.w	r0, r3, r0
1a000ab0:	4285      	cmp	r5, r0
1a000ab2:	d007      	beq.n	1a000ac4 <Chip_Clock_CalcMainPLLValue+0x48>
       pll_get_frac(freq, ppll);
1a000ab4:	4621      	mov	r1, r4
1a000ab6:	4628      	mov	r0, r5
1a000ab8:	f7ff fe9c 	bl	1a0007f4 <pll_get_frac>
       if (!ppll->nsel) {
1a000abc:	68a3      	ldr	r3, [r4, #8]
1a000abe:	b18b      	cbz	r3, 1a000ae4 <Chip_Clock_CalcMainPLLValue+0x68>
       ppll->nsel --;
1a000ac0:	3b01      	subs	r3, #1
1a000ac2:	60a3      	str	r3, [r4, #8]
   if (ppll->msel == 0) {
1a000ac4:	6923      	ldr	r3, [r4, #16]
1a000ac6:	b183      	cbz	r3, 1a000aea <Chip_Clock_CalcMainPLLValue+0x6e>
   if (ppll->psel) {
1a000ac8:	68e2      	ldr	r2, [r4, #12]
1a000aca:	b10a      	cbz	r2, 1a000ad0 <Chip_Clock_CalcMainPLLValue+0x54>
       ppll->psel --;
1a000acc:	3a01      	subs	r2, #1
1a000ace:	60e2      	str	r2, [r4, #12]
   ppll->msel --;
1a000ad0:	3b01      	subs	r3, #1
1a000ad2:	6123      	str	r3, [r4, #16]
   return 0;
1a000ad4:	2000      	movs	r0, #0
1a000ad6:	bd38      	pop	{r3, r4, r5, pc}
       return -1;
1a000ad8:	f04f 30ff 	mov.w	r0, #4294967295
1a000adc:	bd38      	pop	{r3, r4, r5, pc}
1a000ade:	f04f 30ff 	mov.w	r0, #4294967295
1a000ae2:	bd38      	pop	{r3, r4, r5, pc}
           return -1;
1a000ae4:	f04f 30ff 	mov.w	r0, #4294967295
1a000ae8:	bd38      	pop	{r3, r4, r5, pc}
       return - 1;
1a000aea:	f04f 30ff 	mov.w	r0, #4294967295
}
1a000aee:	bd38      	pop	{r3, r4, r5, pc}
1a000af0:	ff6b3a10 	.word	0xff6b3a10
1a000af4:	0b940510 	.word	0x0b940510
1a000af8:	094c5eff 	.word	0x094c5eff

1a000afc <Chip_Clock_GetMainPLLHz>:
{
1a000afc:	b530      	push	{r4, r5, lr}
1a000afe:	b083      	sub	sp, #12
   uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a000b00:	4d17      	ldr	r5, [pc, #92]	; (1a000b60 <Chip_Clock_GetMainPLLHz+0x64>)
1a000b02:	6c6c      	ldr	r4, [r5, #68]	; 0x44
   uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a000b04:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a000b08:	f7ff ff5c 	bl	1a0009c4 <Chip_Clock_GetClockInputHz>
   const uint8_t ptab[] = {1, 2, 4, 8};
1a000b0c:	4b15      	ldr	r3, [pc, #84]	; (1a000b64 <Chip_Clock_GetMainPLLHz+0x68>)
1a000b0e:	681b      	ldr	r3, [r3, #0]
1a000b10:	9301      	str	r3, [sp, #4]
   if (!(LPC_CGU->PLL1_STAT & 1)) {
1a000b12:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a000b14:	f013 0f01 	tst.w	r3, #1
1a000b18:	d01f      	beq.n	1a000b5a <Chip_Clock_GetMainPLLHz+0x5e>
   msel = (PLLReg >> 16) & 0xFF;
1a000b1a:	f3c4 4207 	ubfx	r2, r4, #16, #8
   nsel = (PLLReg >> 12) & 0x3;
1a000b1e:	f3c4 3301 	ubfx	r3, r4, #12, #2
   psel = (PLLReg >> 8) & 0x3;
1a000b22:	f3c4 2101 	ubfx	r1, r4, #8, #2
   fbsel = (PLLReg >> 6) & 0x1;
1a000b26:	f3c4 1580 	ubfx	r5, r4, #6, #1
   m = msel + 1;
1a000b2a:	3201      	adds	r2, #1
   n = nsel + 1;
1a000b2c:	3301      	adds	r3, #1
   p = ptab[psel];
1a000b2e:	f10d 0e08 	add.w	lr, sp, #8
1a000b32:	4471      	add	r1, lr
1a000b34:	f811 1c04 	ldrb.w	r1, [r1, #-4]
   if (direct || fbsel) {
1a000b38:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000b3c:	d108      	bne.n	1a000b50 <Chip_Clock_GetMainPLLHz+0x54>
1a000b3e:	b93d      	cbnz	r5, 1a000b50 <Chip_Clock_GetMainPLLHz+0x54>
   return (m / (2 * p)) * (freq / n);
1a000b40:	0049      	lsls	r1, r1, #1
1a000b42:	fbb2 f2f1 	udiv	r2, r2, r1
1a000b46:	fbb0 f0f3 	udiv	r0, r0, r3
1a000b4a:	fb00 f002 	mul.w	r0, r0, r2
1a000b4e:	e005      	b.n	1a000b5c <Chip_Clock_GetMainPLLHz+0x60>
       return m * (freq / n);
1a000b50:	fbb0 f0f3 	udiv	r0, r0, r3
1a000b54:	fb00 f002 	mul.w	r0, r0, r2
1a000b58:	e000      	b.n	1a000b5c <Chip_Clock_GetMainPLLHz+0x60>
       return 0;
1a000b5a:	2000      	movs	r0, #0
}
1a000b5c:	b003      	add	sp, #12
1a000b5e:	bd30      	pop	{r4, r5, pc}
1a000b60:	40050000 	.word	0x40050000
1a000b64:	1a001a94 	.word	0x1a001a94

1a000b68 <Chip_Clock_GetDivRate>:
{
1a000b68:	b538      	push	{r3, r4, r5, lr}
1a000b6a:	460c      	mov	r4, r1
   input = Chip_Clock_GetDividerSource(divider);
1a000b6c:	4608      	mov	r0, r1
1a000b6e:	f7ff ff0d 	bl	1a00098c <Chip_Clock_GetDividerSource>
1a000b72:	4605      	mov	r5, r0
   div = Chip_Clock_GetDividerDivisor(divider);
1a000b74:	4620      	mov	r0, r4
1a000b76:	f7ff ff17 	bl	1a0009a8 <Chip_Clock_GetDividerDivisor>
1a000b7a:	4604      	mov	r4, r0
   return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a000b7c:	4628      	mov	r0, r5
1a000b7e:	f7ff ff21 	bl	1a0009c4 <Chip_Clock_GetClockInputHz>
1a000b82:	3401      	adds	r4, #1
}
1a000b84:	fbb0 f0f4 	udiv	r0, r0, r4
1a000b88:	bd38      	pop	{r3, r4, r5, pc}
1a000b8a:	Address 0x1a000b8a is out of bounds.


1a000b8c <Chip_Clock_SetBaseClock>:
   return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a000b8c:	b430      	push	{r4, r5}
   uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a000b8e:	f100 0416 	add.w	r4, r0, #22
1a000b92:	00a4      	lsls	r4, r4, #2
1a000b94:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a000b98:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a000b9c:	6865      	ldr	r5, [r4, #4]

   if (BaseClock < CLK_BASE_NONE) {
1a000b9e:	281b      	cmp	r0, #27
1a000ba0:	d813      	bhi.n	1a000bca <Chip_Clock_SetBaseClock+0x3e>
       if (Input != CLKINPUT_PD) {
1a000ba2:	2911      	cmp	r1, #17
1a000ba4:	d01a      	beq.n	1a000bdc <Chip_Clock_SetBaseClock+0x50>
           /* Mask off fields we plan to update */
           reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a000ba6:	4c0e      	ldr	r4, [pc, #56]	; (1a000be0 <Chip_Clock_SetBaseClock+0x54>)
1a000ba8:	402c      	ands	r4, r5

           if (autoblocken) {
1a000baa:	b10a      	cbz	r2, 1a000bb0 <Chip_Clock_SetBaseClock+0x24>
               reg |= (1 << 11);
1a000bac:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
           }
           if (powerdn) {
1a000bb0:	b10b      	cbz	r3, 1a000bb6 <Chip_Clock_SetBaseClock+0x2a>
               reg |= (1 << 0);
1a000bb2:	f044 0401 	orr.w	r4, r4, #1
           }

           /* Set clock source */
           reg |= (Input << 24);
1a000bb6:	ea44 6401 	orr.w	r4, r4, r1, lsl #24

           LPC_CGU->BASE_CLK[BaseClock] = reg;
1a000bba:	3016      	adds	r0, #22
1a000bbc:	0080      	lsls	r0, r0, #2
1a000bbe:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000bc2:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000bc6:	6044      	str	r4, [r0, #4]
1a000bc8:	e008      	b.n	1a000bdc <Chip_Clock_SetBaseClock+0x50>
       }
   }
   else {
       LPC_CGU->BASE_CLK[BaseClock] = reg | 1; /* Power down this base clock */
1a000bca:	f045 0501 	orr.w	r5, r5, #1
1a000bce:	3016      	adds	r0, #22
1a000bd0:	0080      	lsls	r0, r0, #2
1a000bd2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000bd6:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000bda:	6045      	str	r5, [r0, #4]
   }
}
1a000bdc:	bc30      	pop	{r4, r5}
1a000bde:	4770      	bx	lr
1a000be0:	e0fff7fe 	.word	0xe0fff7fe

1a000be4 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
   uint32_t reg;

   if (BaseClock >= CLK_BASE_NONE) {
1a000be4:	281b      	cmp	r0, #27
1a000be6:	d901      	bls.n	1a000bec <Chip_Clock_GetBaseClock+0x8>
       return CLKINPUT_PD;
1a000be8:	2011      	movs	r0, #17
1a000bea:	4770      	bx	lr
   }

   reg = LPC_CGU->BASE_CLK[BaseClock];
1a000bec:	3016      	adds	r0, #22
1a000bee:	0080      	lsls	r0, r0, #2
1a000bf0:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000bf4:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000bf8:	6840      	ldr	r0, [r0, #4]

   /* base clock is powered down? */
   if (reg & 1) {
1a000bfa:	f010 0f01 	tst.w	r0, #1
1a000bfe:	d001      	beq.n	1a000c04 <Chip_Clock_GetBaseClock+0x20>
       return CLKINPUT_PD;
1a000c00:	2011      	movs	r0, #17
   }

   return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a000c02:	4770      	bx	lr
   return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000c04:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000c08:	4770      	bx	lr

1a000c0a <Chip_Clock_GetBaseClocktHz>:
{
1a000c0a:	b508      	push	{r3, lr}
   return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a000c0c:	f7ff ffea 	bl	1a000be4 <Chip_Clock_GetBaseClock>
1a000c10:	f7ff fed8 	bl	1a0009c4 <Chip_Clock_GetClockInputHz>
}
1a000c14:	bd08      	pop	{r3, pc}
1a000c16:	Address 0x1a000c16 is out of bounds.


1a000c18 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
   uint32_t reg = 1;

   if (autoen) {
1a000c18:	b969      	cbnz	r1, 1a000c36 <Chip_Clock_EnableOpts+0x1e>
   uint32_t reg = 1;
1a000c1a:	2101      	movs	r1, #1
       reg |= (1 << 1);
   }
   if (wakeupen) {
1a000c1c:	b10a      	cbz	r2, 1a000c22 <Chip_Clock_EnableOpts+0xa>
       reg |= (1 << 2);
1a000c1e:	f041 0104 	orr.w	r1, r1, #4
   }

   /* Not all clocks support a divider, but we won't check that here. Only
      dividers of 1 and 2 are allowed. Assume 1 if not 2 */
   if (div == 2) {
1a000c22:	2b02      	cmp	r3, #2
1a000c24:	d009      	beq.n	1a000c3a <Chip_Clock_EnableOpts+0x22>
       reg |= (1 << 5);
   }

   /* Setup peripheral clock and start running */
   if (clk >= CLK_CCU2_START) {
1a000c26:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000c2a:	d209      	bcs.n	1a000c40 <Chip_Clock_EnableOpts+0x28>
       LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
   }
   else {
       LPC_CCU1->CLKCCU[clk].CFG = reg;
1a000c2c:	3020      	adds	r0, #32
1a000c2e:	4b07      	ldr	r3, [pc, #28]	; (1a000c4c <Chip_Clock_EnableOpts+0x34>)
1a000c30:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a000c34:	4770      	bx	lr
       reg |= (1 << 1);
1a000c36:	2103      	movs	r1, #3
1a000c38:	e7f0      	b.n	1a000c1c <Chip_Clock_EnableOpts+0x4>
       reg |= (1 << 5);
1a000c3a:	f041 0120 	orr.w	r1, r1, #32
1a000c3e:	e7f2      	b.n	1a000c26 <Chip_Clock_EnableOpts+0xe>
       LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a000c40:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a000c44:	4b02      	ldr	r3, [pc, #8]	; (1a000c50 <Chip_Clock_EnableOpts+0x38>)
1a000c46:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a000c4a:	4770      	bx	lr
1a000c4c:	40051000 	.word	0x40051000
1a000c50:	40052000 	.word	0x40052000

1a000c54 <Chip_Clock_Disable>:

/* Disables a peripheral clock */
void Chip_Clock_Disable(CHIP_CCU_CLK_T clk)
{
   /* Stop peripheral clock */
   if (clk >= CLK_CCU2_START) {
1a000c54:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000c58:	d208      	bcs.n	1a000c6c <Chip_Clock_Disable+0x18>
       LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG &= ~1;
   }
   else {
       LPC_CCU1->CLKCCU[clk].CFG &= ~1;
1a000c5a:	4a09      	ldr	r2, [pc, #36]	; (1a000c80 <Chip_Clock_Disable+0x2c>)
1a000c5c:	3020      	adds	r0, #32
1a000c5e:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a000c62:	f023 0301 	bic.w	r3, r3, #1
1a000c66:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a000c6a:	4770      	bx	lr
       LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG &= ~1;
1a000c6c:	4a05      	ldr	r2, [pc, #20]	; (1a000c84 <Chip_Clock_Disable+0x30>)
1a000c6e:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a000c72:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a000c76:	f023 0301 	bic.w	r3, r3, #1
1a000c7a:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a000c7e:	4770      	bx	lr
1a000c80:	40051000 	.word	0x40051000
1a000c84:	40052000 	.word	0x40052000

1a000c88 <Chip_Clock_GetRate>:
   LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a000c88:	b510      	push	{r4, lr}
   CHIP_CGU_BASE_CLK_T baseclk;
   uint32_t reg, div, rate;

   /* Get CCU config register for clock */
   if (clk >= CLK_CCU2_START) {
1a000c8a:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000c8e:	d309      	bcc.n	1a000ca4 <Chip_Clock_GetRate+0x1c>
       reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a000c90:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a000c94:	4a0d      	ldr	r2, [pc, #52]	; (1a000ccc <Chip_Clock_GetRate+0x44>)
1a000c96:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
   else {
       reg = LPC_CCU1->CLKCCU[clk].CFG;
   }

   /* Is the clock enabled? */
   if (reg & 1) {
1a000c9a:	f014 0f01 	tst.w	r4, #1
1a000c9e:	d107      	bne.n	1a000cb0 <Chip_Clock_GetRate+0x28>

       }
       rate = rate / div;
   }
   else {
       rate = 0;
1a000ca0:	2000      	movs	r0, #0
   }

   return rate;
}
1a000ca2:	bd10      	pop	{r4, pc}
       reg = LPC_CCU1->CLKCCU[clk].CFG;
1a000ca4:	f100 0320 	add.w	r3, r0, #32
1a000ca8:	4a09      	ldr	r2, [pc, #36]	; (1a000cd0 <Chip_Clock_GetRate+0x48>)
1a000caa:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a000cae:	e7f4      	b.n	1a000c9a <Chip_Clock_GetRate+0x12>
       baseclk = Chip_Clock_FindBaseClock(clk);
1a000cb0:	f7ff fe20 	bl	1a0008f4 <Chip_Clock_FindBaseClock>
       rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a000cb4:	f7ff ffa9 	bl	1a000c0a <Chip_Clock_GetBaseClocktHz>
       if (((reg >> 5) & 0x7) == 0) {
1a000cb8:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a000cbc:	d103      	bne.n	1a000cc6 <Chip_Clock_GetRate+0x3e>
           div = 1;
1a000cbe:	2301      	movs	r3, #1
       rate = rate / div;
1a000cc0:	fbb0 f0f3 	udiv	r0, r0, r3
1a000cc4:	bd10      	pop	{r4, pc}
           div = 2;/* No other dividers supported */
1a000cc6:	2302      	movs	r3, #2
1a000cc8:	e7fa      	b.n	1a000cc0 <Chip_Clock_GetRate+0x38>
1a000cca:	bf00      	nop
1a000ccc:	40052000 	.word	0x40052000
1a000cd0:	40051000 	.word	0x40051000

1a000cd4 <fpuInit>:
 * Public functions
 ****************************************************************************/

/* Early initialization of the FPU */
void fpuInit(void)
{
1a000cd4:	b084      	sub	sp, #16
   volatile uint32_t Cpacr;
   volatile uint32_t Mvfr0;
   volatile uint32_t Mvfr1;
   char vfpPresent = 0;

   Mvfr0 = *regMvfr0;
1a000cd6:	4b0f      	ldr	r3, [pc, #60]	; (1a000d14 <fpuInit+0x40>)
1a000cd8:	681b      	ldr	r3, [r3, #0]
1a000cda:	9302      	str	r3, [sp, #8]
   Mvfr1 = *regMvfr1;
1a000cdc:	4b0e      	ldr	r3, [pc, #56]	; (1a000d18 <fpuInit+0x44>)
1a000cde:	681b      	ldr	r3, [r3, #0]
1a000ce0:	9301      	str	r3, [sp, #4]

   vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a000ce2:	9a02      	ldr	r2, [sp, #8]
1a000ce4:	4b0d      	ldr	r3, [pc, #52]	; (1a000d1c <fpuInit+0x48>)
1a000ce6:	429a      	cmp	r2, r3
1a000ce8:	d00c      	beq.n	1a000d04 <fpuInit+0x30>
1a000cea:	2300      	movs	r3, #0

   if (vfpPresent) {
1a000cec:	b143      	cbz	r3, 1a000d00 <fpuInit+0x2c>
       Cpacr = *regCpacr;
1a000cee:	4a0c      	ldr	r2, [pc, #48]	; (1a000d20 <fpuInit+0x4c>)
1a000cf0:	6813      	ldr	r3, [r2, #0]
1a000cf2:	9303      	str	r3, [sp, #12]
       Cpacr |= (0xF << 20);
1a000cf4:	9b03      	ldr	r3, [sp, #12]
1a000cf6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a000cfa:	9303      	str	r3, [sp, #12]
       *regCpacr = Cpacr;  // enable CP10 and CP11 for full access
1a000cfc:	9b03      	ldr	r3, [sp, #12]
1a000cfe:	6013      	str	r3, [r2, #0]
   }
#endif /* __FPU_PRESENT != 0 */
}
1a000d00:	b004      	add	sp, #16
1a000d02:	4770      	bx	lr
   vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a000d04:	9a01      	ldr	r2, [sp, #4]
1a000d06:	4b07      	ldr	r3, [pc, #28]	; (1a000d24 <fpuInit+0x50>)
1a000d08:	429a      	cmp	r2, r3
1a000d0a:	d001      	beq.n	1a000d10 <fpuInit+0x3c>
1a000d0c:	2300      	movs	r3, #0
1a000d0e:	e7ed      	b.n	1a000cec <fpuInit+0x18>
1a000d10:	2301      	movs	r3, #1
1a000d12:	e7eb      	b.n	1a000cec <fpuInit+0x18>
1a000d14:	e000ef40 	.word	0xe000ef40
1a000d18:	e000ef44 	.word	0xe000ef44
1a000d1c:	10110021 	.word	0x10110021
1a000d20:	e000ed88 	.word	0xe000ed88
1a000d24:	11000011 	.word	0x11000011

1a000d28 <Chip_GPIO_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
1a000d28:	4770      	bx	lr

1a000d2a <Chip_GPIO_SetDir>:
}

/* Set Direction for a GPIO port */
void Chip_GPIO_SetDir(LPC_GPIO_T *pGPIO, uint8_t portNum, uint32_t bitValue, uint8_t out)
{
   if (out) {
1a000d2a:	b943      	cbnz	r3, 1a000d3e <Chip_GPIO_SetDir+0x14>
       pGPIO->DIR[portNum] |= bitValue;
   }
   else {
       pGPIO->DIR[portNum] &= ~bitValue;
1a000d2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
1a000d30:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
1a000d34:	ea23 0202 	bic.w	r2, r3, r2
1a000d38:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
1a000d3c:	4770      	bx	lr
       pGPIO->DIR[portNum] |= bitValue;
1a000d3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
1a000d42:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
1a000d46:	431a      	orrs	r2, r3
1a000d48:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
1a000d4c:	4770      	bx	lr
1a000d4e:	Address 0x1a000d4e is out of bounds.


1a000d50 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a000d50:	b570      	push	{r4, r5, r6, lr}
1a000d52:	b092      	sub	sp, #72	; 0x48
1a000d54:	4605      	mov	r5, r0
1a000d56:	460e      	mov	r6, r1
1a000d58:	4614      	mov	r4, r2
   int i;
   volatile uint32_t delay = 5500;
1a000d5a:	f241 537c 	movw	r3, #5500	; 0x157c
1a000d5e:	9311      	str	r3, [sp, #68]	; 0x44
   uint32_t direct = 0;
   PLL_PARAM_T ppll;

   if (clkin == CLKIN_CRYSTAL) {
1a000d60:	2806      	cmp	r0, #6
1a000d62:	d044      	beq.n	1a000dee <Chip_SetupCoreClock+0x9e>
       /* Switch main system clocking to crystal */
       Chip_Clock_EnableCrystal();
   }
   Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a000d64:	2300      	movs	r3, #0
1a000d66:	2201      	movs	r2, #1
1a000d68:	4629      	mov	r1, r5
1a000d6a:	2004      	movs	r0, #4
1a000d6c:	f7ff ff0e 	bl	1a000b8c <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
   /* power down main PLL */
   LPC_CGU->PLL1_CTRL |= 1;
1a000d70:	4a4a      	ldr	r2, [pc, #296]	; (1a000e9c <Chip_SetupCoreClock+0x14c>)
1a000d72:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a000d74:	f043 0301 	orr.w	r3, r3, #1
1a000d78:	6453      	str	r3, [r2, #68]	; 0x44
   Chip_Clock_DisableMainPLL(); /* Disable PLL */

   /* Calculate the PLL Parameters */
   ppll.srcin = clkin;
1a000d7a:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
   Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a000d7e:	a909      	add	r1, sp, #36	; 0x24
1a000d80:	4630      	mov	r0, r6
1a000d82:	f7ff fe7b 	bl	1a000a7c <Chip_Clock_CalcMainPLLValue>

   if (core_freq > 110000000UL) {
1a000d86:	4b46      	ldr	r3, [pc, #280]	; (1a000ea0 <Chip_SetupCoreClock+0x150>)
1a000d88:	429e      	cmp	r6, r3
1a000d8a:	d938      	bls.n	1a000dfe <Chip_SetupCoreClock+0xae>
       if (!(ppll.ctrl & (1 << 7)) || ppll.psel) {
1a000d8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a000d8e:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000d92:	d001      	beq.n	1a000d98 <Chip_SetupCoreClock+0x48>
1a000d94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a000d96:	b36a      	cbz	r2, 1a000df4 <Chip_SetupCoreClock+0xa4>
           PLL_PARAM_T lpll;
           /* Calculate the PLL Parameters */
           lpll.srcin = clkin;
1a000d98:	f88d 5008 	strb.w	r5, [sp, #8]
           Chip_Clock_CalcMainPLLValue(110000000UL, &lpll);
1a000d9c:	a901      	add	r1, sp, #4
1a000d9e:	4840      	ldr	r0, [pc, #256]	; (1a000ea0 <Chip_SetupCoreClock+0x150>)
1a000da0:	f7ff fe6c 	bl	1a000a7c <Chip_Clock_CalcMainPLLValue>
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
   /* power up main PLL */
   LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8);
1a000da4:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a000da8:	9b01      	ldr	r3, [sp, #4]
1a000daa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000dae:	9a05      	ldr	r2, [sp, #20]
1a000db0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a000db4:	9a03      	ldr	r2, [sp, #12]
1a000db6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000dba:	9a04      	ldr	r2, [sp, #16]
1a000dbc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000dc0:	4a36      	ldr	r2, [pc, #216]	; (1a000e9c <Chip_SetupCoreClock+0x14c>)
1a000dc2:	6453      	str	r3, [r2, #68]	; 0x44
 * @note   The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
   /* Return true if locked */
   return (LPC_CGU->PLL1_STAT & 1) != 0;
1a000dc4:	4b35      	ldr	r3, [pc, #212]	; (1a000e9c <Chip_SetupCoreClock+0x14c>)
1a000dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
           Chip_Clock_SetupMainPLL(&lpll);
           /* Wait for the PLL to lock */
           while(!Chip_Clock_MainPLLLocked()) {}
1a000dc8:	f013 0f01 	tst.w	r3, #1
1a000dcc:	d0fa      	beq.n	1a000dc4 <Chip_SetupCoreClock+0x74>
           Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a000dce:	2300      	movs	r3, #0
1a000dd0:	2201      	movs	r2, #1
1a000dd2:	2109      	movs	r1, #9
1a000dd4:	2004      	movs	r0, #4
1a000dd6:	f7ff fed9 	bl	1a000b8c <Chip_Clock_SetBaseClock>
           while(delay --){}
1a000dda:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a000ddc:	1e5a      	subs	r2, r3, #1
1a000dde:	9211      	str	r2, [sp, #68]	; 0x44
1a000de0:	2b00      	cmp	r3, #0
1a000de2:	d1fa      	bne.n	1a000dda <Chip_SetupCoreClock+0x8a>
           delay = 5500;
1a000de4:	f241 537c 	movw	r3, #5500	; 0x157c
1a000de8:	9311      	str	r3, [sp, #68]	; 0x44
   uint32_t direct = 0;
1a000dea:	2500      	movs	r5, #0
       if (!(ppll.ctrl & (1 << 7)) || ppll.psel) {
1a000dec:	e008      	b.n	1a000e00 <Chip_SetupCoreClock+0xb0>
       Chip_Clock_EnableCrystal();
1a000dee:	f7ff fda7 	bl	1a000940 <Chip_Clock_EnableCrystal>
1a000df2:	e7b7      	b.n	1a000d64 <Chip_SetupCoreClock+0x14>
       } else {
           direct = 1;
           ppll.ctrl &= ~(1 << 7);
1a000df4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000df8:	9309      	str	r3, [sp, #36]	; 0x24
           direct = 1;
1a000dfa:	2501      	movs	r5, #1
1a000dfc:	e000      	b.n	1a000e00 <Chip_SetupCoreClock+0xb0>
   uint32_t direct = 0;
1a000dfe:	2500      	movs	r5, #0
   LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8);
1a000e00:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
1a000e04:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a000e06:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000e0a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1a000e0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a000e10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a000e12:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000e16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a000e18:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000e1c:	4a1f      	ldr	r2, [pc, #124]	; (1a000e9c <Chip_SetupCoreClock+0x14c>)
1a000e1e:	6453      	str	r3, [r2, #68]	; 0x44
   return (LPC_CGU->PLL1_STAT & 1) != 0;
1a000e20:	4b1e      	ldr	r3, [pc, #120]	; (1a000e9c <Chip_SetupCoreClock+0x14c>)
1a000e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40

   /* Setup and start the PLL */
   Chip_Clock_SetupMainPLL(&ppll);

   /* Wait for the PLL to lock */
   while(!Chip_Clock_MainPLLLocked()) {}
1a000e24:	f013 0f01 	tst.w	r3, #1
1a000e28:	d0fa      	beq.n	1a000e20 <Chip_SetupCoreClock+0xd0>

   /* Set core clock base as PLL1 */
   Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a000e2a:	2300      	movs	r3, #0
1a000e2c:	2201      	movs	r2, #1
1a000e2e:	2109      	movs	r1, #9
1a000e30:	2004      	movs	r0, #4
1a000e32:	f7ff feab 	bl	1a000b8c <Chip_Clock_SetBaseClock>

   while(delay --){} /* Wait for approx 50 uSec */
1a000e36:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a000e38:	1e5a      	subs	r2, r3, #1
1a000e3a:	9211      	str	r2, [sp, #68]	; 0x44
1a000e3c:	2b00      	cmp	r3, #0
1a000e3e:	d1fa      	bne.n	1a000e36 <Chip_SetupCoreClock+0xe6>
   if (direct) {
1a000e40:	b1d5      	cbz	r5, 1a000e78 <Chip_SetupCoreClock+0x128>
       delay = 5500;
1a000e42:	f241 537c 	movw	r3, #5500	; 0x157c
1a000e46:	9311      	str	r3, [sp, #68]	; 0x44
       ppll.ctrl |= 1 << 7;
1a000e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a000e4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a000e4e:	9309      	str	r3, [sp, #36]	; 0x24
   LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8);
1a000e50:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
1a000e54:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000e58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1a000e5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a000e5e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a000e60:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000e64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a000e66:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000e6a:	4a0c      	ldr	r2, [pc, #48]	; (1a000e9c <Chip_SetupCoreClock+0x14c>)
1a000e6c:	6453      	str	r3, [r2, #68]	; 0x44
       Chip_Clock_SetupMainPLL(&ppll); /* Set DIRECT to operate at full frequency */
       while(delay --){} /* Wait for approx 50 uSec */
1a000e6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a000e70:	1e5a      	subs	r2, r3, #1
1a000e72:	9211      	str	r2, [sp, #68]	; 0x44
1a000e74:	2b00      	cmp	r3, #0
1a000e76:	d1fa      	bne.n	1a000e6e <Chip_SetupCoreClock+0x11e>
   }

   if (setbase) {
1a000e78:	b174      	cbz	r4, 1a000e98 <Chip_SetupCoreClock+0x148>
1a000e7a:	2400      	movs	r4, #0
1a000e7c:	e00a      	b.n	1a000e94 <Chip_SetupCoreClock+0x144>
       /* Setup system base clocks and initial states. This won't enable and
          disable individual clocks, but sets up the base clock sources for
          each individual peripheral clock. */
       for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
           Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a000e7e:	4809      	ldr	r0, [pc, #36]	; (1a000ea4 <Chip_SetupCoreClock+0x154>)
1a000e80:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a000e84:	78cb      	ldrb	r3, [r1, #3]
1a000e86:	788a      	ldrb	r2, [r1, #2]
1a000e88:	7849      	ldrb	r1, [r1, #1]
1a000e8a:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a000e8e:	f7ff fe7d 	bl	1a000b8c <Chip_Clock_SetBaseClock>
       for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a000e92:	3401      	adds	r4, #1
1a000e94:	2c11      	cmp	r4, #17
1a000e96:	d9f2      	bls.n	1a000e7e <Chip_SetupCoreClock+0x12e>
                                   InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
       }
   }
}
1a000e98:	b012      	add	sp, #72	; 0x48
1a000e9a:	bd70      	pop	{r4, r5, r6, pc}
1a000e9c:	40050000 	.word	0x40050000
1a000ea0:	068e7780 	.word	0x068e7780
1a000ea4:	1a001b0c 	.word	0x1a001b0c

1a000ea8 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
   uint32_t base = (uint32_t) pUART;
   switch(base) {
1a000ea8:	4b09      	ldr	r3, [pc, #36]	; (1a000ed0 <Chip_UART_GetIndex+0x28>)
1a000eaa:	4298      	cmp	r0, r3
1a000eac:	d009      	beq.n	1a000ec2 <Chip_UART_GetIndex+0x1a>
1a000eae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a000eb2:	4298      	cmp	r0, r3
1a000eb4:	d007      	beq.n	1a000ec6 <Chip_UART_GetIndex+0x1e>
1a000eb6:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a000eba:	4298      	cmp	r0, r3
1a000ebc:	d005      	beq.n	1a000eca <Chip_UART_GetIndex+0x22>
       case LPC_USART0_BASE:
           return 0;
1a000ebe:	2000      	movs	r0, #0
1a000ec0:	4770      	bx	lr
       case LPC_UART1_BASE:
           return 1;
       case LPC_USART2_BASE:
           return 2;
1a000ec2:	2002      	movs	r0, #2
1a000ec4:	4770      	bx	lr
       case LPC_USART3_BASE:
           return 3;
1a000ec6:	2003      	movs	r0, #3
1a000ec8:	4770      	bx	lr
           return 1;
1a000eca:	2001      	movs	r0, #1
       default:
           return 0; /* Should never come here */
   }
}
1a000ecc:	4770      	bx	lr
1a000ece:	bf00      	nop
1a000ed0:	400c1000 	.word	0x400c1000

1a000ed4 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a000ed4:	b530      	push	{r4, r5, lr}
1a000ed6:	b083      	sub	sp, #12
1a000ed8:	4604      	mov	r4, r0
    volatile uint32_t tmp;

   /* Enable UART clocking. UART base clock(s) must already be enabled */
   Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a000eda:	f7ff ffe5 	bl	1a000ea8 <Chip_UART_GetIndex>
1a000ede:	2301      	movs	r3, #1
1a000ee0:	461a      	mov	r2, r3
1a000ee2:	4619      	mov	r1, r3
1a000ee4:	4d0e      	ldr	r5, [pc, #56]	; (1a000f20 <Chip_UART_Init+0x4c>)
1a000ee6:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a000eea:	f7ff fe95 	bl	1a000c18 <Chip_Clock_EnableOpts>
 *         with a RX trip level of 8 characters, use something like
 *         (UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
   pUART->FCR = fcr;
1a000eee:	2307      	movs	r3, #7
1a000ef0:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a000ef2:	2300      	movs	r3, #0
1a000ef4:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
   pUART->IER = 0;
1a000ef6:	6063      	str	r3, [r4, #4]
   /* Set LCR to default state */
   pUART->LCR = 0;
1a000ef8:	60e3      	str	r3, [r4, #12]
   /* Set ACR to default state */
   pUART->ACR = 0;
1a000efa:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
   pUART->RS485CTRL = 0;
1a000efc:	64e3      	str	r3, [r4, #76]	; 0x4c
   /* Set RS485 delay timer to default state */
   pUART->RS485DLY = 0;
1a000efe:	6563      	str	r3, [r4, #84]	; 0x54
   /* Set RS485 addr match to default state */
   pUART->RS485ADRMATCH = 0;
1a000f00:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a000f02:	4b08      	ldr	r3, [pc, #32]	; (1a000f24 <Chip_UART_Init+0x50>)
1a000f04:	429c      	cmp	r4, r3
1a000f06:	d005      	beq.n	1a000f14 <Chip_UART_Init+0x40>
 *         stop bit, and even (enabled) parity would be
 *         (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
   pUART->LCR = config;
1a000f08:	2303      	movs	r3, #3
1a000f0a:	60e3      	str	r3, [r4, #12]

   /* Default 8N1, with DLAB disabled */
   Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

   /* Disable fractional divider */
   pUART->FDR = 0x10;
1a000f0c:	2310      	movs	r3, #16
1a000f0e:	62a3      	str	r3, [r4, #40]	; 0x28
}
1a000f10:	b003      	add	sp, #12
1a000f12:	bd30      	pop	{r4, r5, pc}
       pUART->MCR = 0;
1a000f14:	2300      	movs	r3, #0
1a000f16:	6123      	str	r3, [r4, #16]
       tmp = pUART->MSR;
1a000f18:	69a3      	ldr	r3, [r4, #24]
1a000f1a:	9301      	str	r3, [sp, #4]
1a000f1c:	e7f4      	b.n	1a000f08 <Chip_UART_Init+0x34>
1a000f1e:	bf00      	nop
1a000f20:	1a001b5c 	.word	0x1a001b5c
1a000f24:	40082000 	.word	0x40082000

1a000f28 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a000f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a000f2c:	b083      	sub	sp, #12
1a000f2e:	4683      	mov	fp, r0
1a000f30:	4688      	mov	r8, r1
   uint32_t sdiv = 0, sm = 1, sd = 0;
   uint32_t pclk, m, d;
   uint32_t odiff = -1UL; /* old best diff */

   /* Get base clock for the corresponding UART */
   pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a000f32:	f7ff ffb9 	bl	1a000ea8 <Chip_UART_GetIndex>
1a000f36:	4b35      	ldr	r3, [pc, #212]	; (1a00100c <Chip_UART_SetBaudFDR+0xe4>)
1a000f38:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a000f3c:	f7ff fea4 	bl	1a000c88 <Chip_Clock_GetRate>
1a000f40:	4606      	mov	r6, r0
   uint32_t odiff = -1UL; /* old best diff */
1a000f42:	f04f 37ff 	mov.w	r7, #4294967295

   /* Loop through all possible fractional divider values */
   for (m = 1; odiff && m < 16; m++) {
1a000f46:	2401      	movs	r4, #1
   uint32_t sdiv = 0, sm = 1, sd = 0;
1a000f48:	2300      	movs	r3, #0
1a000f4a:	9301      	str	r3, [sp, #4]
1a000f4c:	46a2      	mov	sl, r4
1a000f4e:	4699      	mov	r9, r3
   for (m = 1; odiff && m < 16; m++) {
1a000f50:	e02a      	b.n	1a000fa8 <Chip_UART_SetBaudFDR+0x80>
           /* Upper 32-bit of dval has div */
           div = (uint32_t) (dval >> 32);

           /* Closer to next div */
           if ((int)diff < 0) {
               diff = -diff;
1a000f52:	4243      	negs	r3, r0
               div ++;
1a000f54:	1c4a      	adds	r2, r1, #1
1a000f56:	e017      	b.n	1a000f88 <Chip_UART_SetBaudFDR+0x60>
           sd = d;
           sm = m;
           odiff = diff;

           /* On perfect match, break loop */
           if(!diff) {
1a000f58:	b30b      	cbz	r3, 1a000f9e <Chip_UART_SetBaudFDR+0x76>
           odiff = diff;
1a000f5a:	461f      	mov	r7, r3
           sd = d;
1a000f5c:	9501      	str	r5, [sp, #4]
           sm = m;
1a000f5e:	46a2      	mov	sl, r4
           sdiv = div;
1a000f60:	4691      	mov	r9, r2
       for (d = 0; d < m; d++) {
1a000f62:	3501      	adds	r5, #1
1a000f64:	42ac      	cmp	r4, r5
1a000f66:	d91e      	bls.n	1a000fa6 <Chip_UART_SetBaudFDR+0x7e>
           uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a000f68:	0933      	lsrs	r3, r6, #4
1a000f6a:	0730      	lsls	r0, r6, #28
1a000f6c:	fba4 0100 	umull	r0, r1, r4, r0
1a000f70:	fb04 1103 	mla	r1, r4, r3, r1
1a000f74:	1962      	adds	r2, r4, r5
1a000f76:	fb08 f202 	mul.w	r2, r8, r2
1a000f7a:	2300      	movs	r3, #0
1a000f7c:	f000 fbfa 	bl	1a001774 <__aeabi_uldivmod>
           diff = (uint32_t) dval;
1a000f80:	4603      	mov	r3, r0
           div = (uint32_t) (dval >> 32);
1a000f82:	460a      	mov	r2, r1
           if ((int)diff < 0) {
1a000f84:	2800      	cmp	r0, #0
1a000f86:	dbe4      	blt.n	1a000f52 <Chip_UART_SetBaudFDR+0x2a>
           if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a000f88:	429f      	cmp	r7, r3
1a000f8a:	d3ea      	bcc.n	1a000f62 <Chip_UART_SetBaudFDR+0x3a>
1a000f8c:	2a00      	cmp	r2, #0
1a000f8e:	d0e8      	beq.n	1a000f62 <Chip_UART_SetBaudFDR+0x3a>
1a000f90:	0c11      	lsrs	r1, r2, #16
1a000f92:	d1e6      	bne.n	1a000f62 <Chip_UART_SetBaudFDR+0x3a>
1a000f94:	2a02      	cmp	r2, #2
1a000f96:	d8df      	bhi.n	1a000f58 <Chip_UART_SetBaudFDR+0x30>
1a000f98:	2d00      	cmp	r5, #0
1a000f9a:	d1e2      	bne.n	1a000f62 <Chip_UART_SetBaudFDR+0x3a>
1a000f9c:	e7dc      	b.n	1a000f58 <Chip_UART_SetBaudFDR+0x30>
           odiff = diff;
1a000f9e:	461f      	mov	r7, r3
           sd = d;
1a000fa0:	9501      	str	r5, [sp, #4]
           sm = m;
1a000fa2:	46a2      	mov	sl, r4
           sdiv = div;
1a000fa4:	4691      	mov	r9, r2
   for (m = 1; odiff && m < 16; m++) {
1a000fa6:	3401      	adds	r4, #1
1a000fa8:	b11f      	cbz	r7, 1a000fb2 <Chip_UART_SetBaudFDR+0x8a>
1a000faa:	2c0f      	cmp	r4, #15
1a000fac:	d801      	bhi.n	1a000fb2 <Chip_UART_SetBaudFDR+0x8a>
1a000fae:	2500      	movs	r5, #0
1a000fb0:	e7d8      	b.n	1a000f64 <Chip_UART_SetBaudFDR+0x3c>
           }
       }
   }

   /* Return 0 if a vaild divisor is not possible */
   if (!sdiv) {
1a000fb2:	f1b9 0f00 	cmp.w	r9, #0
1a000fb6:	d024      	beq.n	1a001002 <Chip_UART_SetBaudFDR+0xda>
 * @param  pUART   : Pointer to selected UART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
   pUART->LCR |= UART_LCR_DLAB_EN;
1a000fb8:	f8db 300c 	ldr.w	r3, [fp, #12]
1a000fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a000fc0:	f8cb 300c 	str.w	r3, [fp, #12]
1a000fc4:	fa5f f389 	uxtb.w	r3, r9
 *         order to access the USART Divisor Latches. This function
 *         doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
   pUART->DLL = (uint32_t) dll;
1a000fc8:	f8cb 3000 	str.w	r3, [fp]
1a000fcc:	f3c9 2307 	ubfx	r3, r9, #8, #8
   pUART->DLM = (uint32_t) dlm;
1a000fd0:	f8cb 3004 	str.w	r3, [fp, #4]
   pUART->LCR &= ~UART_LCR_DLAB_EN;
1a000fd4:	f8db 300c 	ldr.w	r3, [fp, #12]
1a000fd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000fdc:	f8cb 300c 	str.w	r3, [fp, #12]
   Chip_UART_EnableDivisorAccess(pUART);
   Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
   Chip_UART_DisableDivisorAccess(pUART);

   /* Set best fractional divider */
   pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a000fe0:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a000fe4:	b2db      	uxtb	r3, r3
1a000fe6:	9901      	ldr	r1, [sp, #4]
1a000fe8:	f001 020f 	and.w	r2, r1, #15
1a000fec:	4313      	orrs	r3, r2
1a000fee:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

   /* Return actual baud rate */
   return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a000ff2:	0933      	lsrs	r3, r6, #4
1a000ff4:	fb03 f30a 	mul.w	r3, r3, sl
1a000ff8:	448a      	add	sl, r1
1a000ffa:	fb0a f909 	mul.w	r9, sl, r9
1a000ffe:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a001002:	4648      	mov	r0, r9
1a001004:	b003      	add	sp, #12
1a001006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00100a:	bf00      	nop
1a00100c:	1a001b54 	.word	0x1a001b54

1a001010 <Board_LED_Init>:

static void Board_LED_Init()
{
   uint32_t idx;

   for (idx = 0; idx < (sizeof(gpioLEDBits) / sizeof(io_port_t)); ++idx) {
1a001010:	2200      	movs	r2, #0
1a001012:	2a05      	cmp	r2, #5
1a001014:	d819      	bhi.n	1a00104a <Board_LED_Init+0x3a>
{
1a001016:	b470      	push	{r4, r5, r6}
       /* Set pin direction and init to off */
       Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, gpioLEDBits[idx].port, gpioLEDBits[idx].pin);
1a001018:	490c      	ldr	r1, [pc, #48]	; (1a00104c <Board_LED_Init+0x3c>)
1a00101a:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a00101e:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a001022:	784c      	ldrb	r4, [r1, #1]
 * @param  pin     : GPIO pin to set direction on as output
 * @return Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
   pGPIO->DIR[port] |= 1UL << pin;
1a001024:	4b0a      	ldr	r3, [pc, #40]	; (1a001050 <Board_LED_Init+0x40>)
1a001026:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a00102a:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a00102e:	2001      	movs	r0, #1
1a001030:	40a0      	lsls	r0, r4
1a001032:	4301      	orrs	r1, r0
1a001034:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
   pGPIO->B[port][pin] = setting;
1a001038:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a00103c:	2100      	movs	r1, #0
1a00103e:	5519      	strb	r1, [r3, r4]
   for (idx = 0; idx < (sizeof(gpioLEDBits) / sizeof(io_port_t)); ++idx) {
1a001040:	3201      	adds	r2, #1
1a001042:	2a05      	cmp	r2, #5
1a001044:	d9e8      	bls.n	1a001018 <Board_LED_Init+0x8>
       Chip_GPIO_SetPinState(LPC_GPIO_PORT, gpioLEDBits[idx].port, gpioLEDBits[idx].pin, (bool) false);
   }
}
1a001046:	bc70      	pop	{r4, r5, r6}
1a001048:	4770      	bx	lr
1a00104a:	4770      	bx	lr
1a00104c:	1a001b6c 	.word	0x1a001b6c
1a001050:	400f4000 	.word	0x400f4000

1a001054 <Board_UART_Init>:
 * @note   Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
   LPC_SCU->SFSP[port][pin] = modefunc;
1a001054:	4b03      	ldr	r3, [pc, #12]	; (1a001064 <Board_UART_Init+0x10>)
1a001056:	2212      	movs	r2, #18
1a001058:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
1a00105c:	22d1      	movs	r2, #209	; 0xd1
1a00105e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
1a001062:	4770      	bx	lr
1a001064:	40086000 	.word	0x40086000

1a001068 <Board_Debug_Init>:
{
1a001068:	b510      	push	{r4, lr}
   Board_UART_Init(DEBUG_UART);
1a00106a:	4c08      	ldr	r4, [pc, #32]	; (1a00108c <Board_Debug_Init+0x24>)
1a00106c:	4620      	mov	r0, r4
1a00106e:	f7ff fff1 	bl	1a001054 <Board_UART_Init>
   Chip_UART_Init(DEBUG_UART);
1a001072:	4620      	mov	r0, r4
1a001074:	f7ff ff2e 	bl	1a000ed4 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, 115200);
1a001078:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a00107c:	4620      	mov	r0, r4
1a00107e:	f7ff ff53 	bl	1a000f28 <Chip_UART_SetBaudFDR>
   pUART->LCR = config;
1a001082:	2303      	movs	r3, #3
1a001084:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a001086:	2301      	movs	r3, #1
1a001088:	65e3      	str	r3, [r4, #92]	; 0x5c
1a00108a:	bd10      	pop	{r4, pc}
1a00108c:	400c1000 	.word	0x400c1000

1a001090 <Board_Init>:
}

/* Set up and initialize all required blocks and functions related to the
   board hardware */
void Board_Init(void)
{
1a001090:	b508      	push	{r3, lr}
   /* Sets up DEBUG UART */
   DEBUGINIT();
1a001092:	f7ff ffe9 	bl	1a001068 <Board_Debug_Init>

   /* Initializes GPIO */
   Chip_GPIO_Init(LPC_GPIO_PORT);
1a001096:	4806      	ldr	r0, [pc, #24]	; (1a0010b0 <Board_Init+0x20>)
1a001098:	f7ff fe46 	bl	1a000d28 <Chip_GPIO_Init>

   /* Initialize LEDs */
   Board_LED_Init();
1a00109c:	f7ff ffb8 	bl	1a001010 <Board_LED_Init>
 * RMII PHY, and must be called before calling any Ethernet
 * functions.
 */
STATIC INLINE void Chip_ENET_RMIIEnable(LPC_ENET_T *pENET)
{
   LPC_CREG->CREG6 |= 0x4;
1a0010a0:	4a04      	ldr	r2, [pc, #16]	; (1a0010b4 <Board_Init+0x24>)
1a0010a2:	f8d2 312c 	ldr.w	r3, [r2, #300]	; 0x12c
1a0010a6:	f043 0304 	orr.w	r3, r3, #4
1a0010aa:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
1a0010ae:	bd08      	pop	{r3, pc}
1a0010b0:	400f4000 	.word	0x400f4000
1a0010b4:	40043000 	.word	0x40043000

1a0010b8 <Board_SetupMuxing>:
 * @return Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
   uint32_t ix;
   for (ix = 0; ix < arrayLength; ix++ ) {
1a0010b8:	2300      	movs	r3, #0
1a0010ba:	2b17      	cmp	r3, #23
1a0010bc:	d812      	bhi.n	1a0010e4 <Board_SetupMuxing+0x2c>
 * Public functions
 ****************************************************************************/

/* Sets up system pin muxing */
void Board_SetupMuxing(void)
{
1a0010be:	b410      	push	{r4}
       Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a0010c0:	4a09      	ldr	r2, [pc, #36]	; (1a0010e8 <Board_SetupMuxing+0x30>)
1a0010c2:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a0010c6:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a0010ca:	784a      	ldrb	r2, [r1, #1]
1a0010cc:	8848      	ldrh	r0, [r1, #2]
   LPC_SCU->SFSP[port][pin] = modefunc;
1a0010ce:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a0010d2:	4906      	ldr	r1, [pc, #24]	; (1a0010ec <Board_SetupMuxing+0x34>)
1a0010d4:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   for (ix = 0; ix < arrayLength; ix++ ) {
1a0010d8:	3301      	adds	r3, #1
1a0010da:	2b17      	cmp	r3, #23
1a0010dc:	d9f0      	bls.n	1a0010c0 <Board_SetupMuxing+0x8>
   /* Setup system level pin muxing */
   Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a0010de:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0010e2:	4770      	bx	lr
1a0010e4:	4770      	bx	lr
1a0010e6:	bf00      	nop
1a0010e8:	1a001b84 	.word	0x1a001b84
1a0010ec:	40086000 	.word	0x40086000

1a0010f0 <Board_SetupClocking>:

/* Set up and initialize clocking prior to call to main */
void Board_SetupClocking(void)
{
1a0010f0:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
   uint32_t FAValue = Hz / 21510000;

   LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a0010f2:	4a17      	ldr	r2, [pc, #92]	; (1a001150 <Board_SetupClocking+0x60>)
1a0010f4:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a0010f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0010fc:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a001100:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
   LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a001104:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a001108:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a00110c:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a001110:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124

   /* Enable Flash acceleration and setup wait states */
   Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);

   /* Setup System core frequency to MAX_CLOCK_FREQ */
   Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a001114:	2201      	movs	r2, #1
1a001116:	490f      	ldr	r1, [pc, #60]	; (1a001154 <Board_SetupClocking+0x64>)
1a001118:	2006      	movs	r0, #6
1a00111a:	f7ff fe19 	bl	1a000d50 <Chip_SetupCoreClock>

   /* Setup system base clocks and initial states. This won't enable and
      disable individual clocks, but sets up the base clock sources for
      each individual peripheral clock. */
   for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a00111e:	2400      	movs	r4, #0
1a001120:	e00a      	b.n	1a001138 <Board_SetupClocking+0x48>
       Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a001122:	480d      	ldr	r0, [pc, #52]	; (1a001158 <Board_SetupClocking+0x68>)
1a001124:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a001128:	78cb      	ldrb	r3, [r1, #3]
1a00112a:	788a      	ldrb	r2, [r1, #2]
1a00112c:	7849      	ldrb	r1, [r1, #1]
1a00112e:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a001132:	f7ff fd2b 	bl	1a000b8c <Chip_Clock_SetBaseClock>
   for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a001136:	3401      	adds	r4, #1
1a001138:	2c02      	cmp	r4, #2
1a00113a:	d9f2      	bls.n	1a001122 <Board_SetupClocking+0x32>
                               InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
   }

   /* Reset and enable 32Khz oscillator */
   LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a00113c:	4b04      	ldr	r3, [pc, #16]	; (1a001150 <Board_SetupClocking+0x60>)
1a00113e:	685a      	ldr	r2, [r3, #4]
1a001140:	f022 020c 	bic.w	r2, r2, #12
1a001144:	605a      	str	r2, [r3, #4]
   LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a001146:	685a      	ldr	r2, [r3, #4]
1a001148:	f042 0203 	orr.w	r2, r2, #3
1a00114c:	605a      	str	r2, [r3, #4]
1a00114e:	bd10      	pop	{r4, pc}
1a001150:	40043000 	.word	0x40043000
1a001154:	0c28cb00 	.word	0x0c28cb00
1a001158:	1a001b78 	.word	0x1a001b78

1a00115c <Board_SystemInit>:
}

/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a00115c:	b508      	push	{r3, lr}
   /* Setup system clocking and memory. This is done early to allow the
      application and tools to clear memory and use scatter loading to
      external memory. */
   Board_SetupMuxing();
1a00115e:	f7ff ffab 	bl	1a0010b8 <Board_SetupMuxing>
   Board_SetupClocking();
1a001162:	f7ff ffc5 	bl	1a0010f0 <Board_SetupClocking>
1a001166:	bd08      	pop	{r3, pc}

1a001168 <ResetISR>:
void ResetISR(void) {
1a001168:	b510      	push	{r4, lr}
    __asm volatile ("cpsid i");
1a00116a:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a00116c:	4a16      	ldr	r2, [pc, #88]	; (1a0011c8 <ResetISR+0x60>)
1a00116e:	4b17      	ldr	r3, [pc, #92]	; (1a0011cc <ResetISR+0x64>)
1a001170:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a001172:	4a17      	ldr	r2, [pc, #92]	; (1a0011d0 <ResetISR+0x68>)
1a001174:	3304      	adds	r3, #4
1a001176:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a001178:	2300      	movs	r3, #0
1a00117a:	e005      	b.n	1a001188 <ResetISR+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a00117c:	f04f 31ff 	mov.w	r1, #4294967295
1a001180:	4a14      	ldr	r2, [pc, #80]	; (1a0011d4 <ResetISR+0x6c>)
1a001182:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a001186:	3301      	adds	r3, #1
1a001188:	2b07      	cmp	r3, #7
1a00118a:	d9f7      	bls.n	1a00117c <ResetISR+0x14>
    __asm volatile ("cpsie i");
1a00118c:	b662      	cpsie	i
    SystemInit();
1a00118e:	f000 f829 	bl	1a0011e4 <SystemInit>
    SectionTableAddr = &__data_section_table;
1a001192:	4b11      	ldr	r3, [pc, #68]	; (1a0011d8 <ResetISR+0x70>)
    while (SectionTableAddr < &__data_section_table_end) {
1a001194:	e007      	b.n	1a0011a6 <ResetISR+0x3e>
        SectionLen = *SectionTableAddr++;
1a001196:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a00119a:	689a      	ldr	r2, [r3, #8]
1a00119c:	6859      	ldr	r1, [r3, #4]
1a00119e:	6818      	ldr	r0, [r3, #0]
1a0011a0:	f7fe fff4 	bl	1a00018c <data_init>
        SectionLen = *SectionTableAddr++;
1a0011a4:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a0011a6:	4a0d      	ldr	r2, [pc, #52]	; (1a0011dc <ResetISR+0x74>)
1a0011a8:	4293      	cmp	r3, r2
1a0011aa:	d3f4      	bcc.n	1a001196 <ResetISR+0x2e>
1a0011ac:	e006      	b.n	1a0011bc <ResetISR+0x54>
        ExeAddr = *SectionTableAddr++;
1a0011ae:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a0011b0:	6859      	ldr	r1, [r3, #4]
1a0011b2:	f854 0b08 	ldr.w	r0, [r4], #8
1a0011b6:	f7fe fff8 	bl	1a0001aa <bss_init>
        SectionLen = *SectionTableAddr++;
1a0011ba:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a0011bc:	4a08      	ldr	r2, [pc, #32]	; (1a0011e0 <ResetISR+0x78>)
1a0011be:	4293      	cmp	r3, r2
1a0011c0:	d3f5      	bcc.n	1a0011ae <ResetISR+0x46>
    main();
1a0011c2:	f7ff f9cf 	bl	1a000564 <main>
1a0011c6:	e7fe      	b.n	1a0011c6 <ResetISR+0x5e>
1a0011c8:	10df1000 	.word	0x10df1000
1a0011cc:	40053100 	.word	0x40053100
1a0011d0:	01dff7ff 	.word	0x01dff7ff
1a0011d4:	e000e280 	.word	0xe000e280
1a0011d8:	1a000114 	.word	0x1a000114
1a0011dc:	1a000150 	.word	0x1a000150
1a0011e0:	1a000178 	.word	0x1a000178

1a0011e4 <SystemInit>:
 * Public functions
 ****************************************************************************/

/* Set up and initialize hardware prior to call to main */
void SystemInit(void)
{
1a0011e4:	b508      	push	{r3, lr}

   *pSCB_VTOR = (unsigned int) &__Vectors;
#endif

#if defined(__FPU_PRESENT) && __FPU_PRESENT == 1
   fpuInit();
1a0011e6:	f7ff fd75 	bl	1a000cd4 <fpuInit>
#if defined(NO_BOARD_LIB)
   /* Chip specific SystemInit */
   Chip_SystemInit();
#else
   /* Board specific SystemInit */
   Board_SystemInit();
1a0011ea:	f7ff ffb7 	bl	1a00115c <Board_SystemInit>
1a0011ee:	bd08      	pop	{r3, pc}

1a0011f0 <adcConfig>:
/*
 * @brief:  enable/disable the ADC and DAC peripheral
 * @param:  ADC_ENABLE, ADC_DISABLE
 * @return: none
*/
void adcConfig( adcConfig_t config ){
1a0011f0:	b510      	push	{r4, lr}
1a0011f2:	b082      	sub	sp, #8

   switch(config){
1a0011f4:	b118      	cbz	r0, 1a0011fe <adcConfig+0xe>
1a0011f6:	2801      	cmp	r0, #1
1a0011f8:	d038      	beq.n	1a00126c <adcConfig+0x7c>
         /* Disable ADC peripheral */
         Chip_ADC_DeInit( LPC_ADC0 );
      break;
   }

}
1a0011fa:	b002      	add	sp, #8
1a0011fc:	bd10      	pop	{r4, pc}
         Chip_ADC_Init( LPC_ADC0, &ADCSetup );
1a0011fe:	4c1d      	ldr	r4, [pc, #116]	; (1a001274 <adcConfig+0x84>)
1a001200:	4669      	mov	r1, sp
1a001202:	4620      	mov	r0, r4
1a001204:	f7ff f9f4 	bl	1a0005f0 <Chip_ADC_Init>
         Chip_ADC_SetBurstCmd( LPC_ADC0, DISABLE );
1a001208:	2100      	movs	r1, #0
1a00120a:	4620      	mov	r0, r4
1a00120c:	f7ff fa87 	bl	1a00071e <Chip_ADC_SetBurstCmd>
         Chip_ADC_SetSampleRate( LPC_ADC0, &ADCSetup, ADC_MAX_SAMPLE_RATE/2 );
1a001210:	4a19      	ldr	r2, [pc, #100]	; (1a001278 <adcConfig+0x88>)
1a001212:	4669      	mov	r1, sp
1a001214:	4620      	mov	r0, r4
1a001216:	f7ff fa55 	bl	1a0006c4 <Chip_ADC_SetSampleRate>
         Chip_ADC_EnableChannel( LPC_ADC0,ADC_CH1, DISABLE );
1a00121a:	2200      	movs	r2, #0
1a00121c:	2101      	movs	r1, #1
1a00121e:	4620      	mov	r0, r4
1a001220:	f7ff fa69 	bl	1a0006f6 <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH1, DISABLE );
1a001224:	2200      	movs	r2, #0
1a001226:	2101      	movs	r1, #1
1a001228:	4620      	mov	r0, r4
1a00122a:	f7ff fa2b 	bl	1a000684 <Chip_ADC_Int_SetChannelCmd>
         Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH2, DISABLE );
1a00122e:	2200      	movs	r2, #0
1a001230:	2102      	movs	r1, #2
1a001232:	4620      	mov	r0, r4
1a001234:	f7ff fa5f 	bl	1a0006f6 <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH2, DISABLE );
1a001238:	2200      	movs	r2, #0
1a00123a:	2102      	movs	r1, #2
1a00123c:	4620      	mov	r0, r4
1a00123e:	f7ff fa21 	bl	1a000684 <Chip_ADC_Int_SetChannelCmd>
         Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH3, DISABLE );
1a001242:	2200      	movs	r2, #0
1a001244:	2103      	movs	r1, #3
1a001246:	4620      	mov	r0, r4
1a001248:	f7ff fa55 	bl	1a0006f6 <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH3, DISABLE );
1a00124c:	2200      	movs	r2, #0
1a00124e:	2103      	movs	r1, #3
1a001250:	4620      	mov	r0, r4
1a001252:	f7ff fa17 	bl	1a000684 <Chip_ADC_Int_SetChannelCmd>
         Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH4, DISABLE );
1a001256:	2200      	movs	r2, #0
1a001258:	2104      	movs	r1, #4
1a00125a:	4620      	mov	r0, r4
1a00125c:	f7ff fa4b 	bl	1a0006f6 <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH4, DISABLE );
1a001260:	2200      	movs	r2, #0
1a001262:	2104      	movs	r1, #4
1a001264:	4620      	mov	r0, r4
1a001266:	f7ff fa0d 	bl	1a000684 <Chip_ADC_Int_SetChannelCmd>
      break;
1a00126a:	e7c6      	b.n	1a0011fa <adcConfig+0xa>
         Chip_ADC_DeInit( LPC_ADC0 );
1a00126c:	4801      	ldr	r0, [pc, #4]	; (1a001274 <adcConfig+0x84>)
1a00126e:	f7ff f9df 	bl	1a000630 <Chip_ADC_DeInit>
}
1a001272:	e7c2      	b.n	1a0011fa <adcConfig+0xa>
1a001274:	400e3000 	.word	0x400e3000
1a001278:	00030d40 	.word	0x00030d40

1a00127c <adcRead>:
/*
 * @brief   Get the value of one ADC channel. Mode: BLOCKING
 * @param   AI0 ... AIn
 * @return  analog value
 */
uint16_t adcRead( adcMap_t analogInput ){
1a00127c:	b570      	push	{r4, r5, r6, lr}
1a00127e:	b082      	sub	sp, #8

   uint8_t lpcAdcChannel = 66 - analogInput;
1a001280:	f1c0 0042 	rsb	r0, r0, #66	; 0x42
1a001284:	b2c4      	uxtb	r4, r0
   uint16_t analogValue = 0;
1a001286:	2600      	movs	r6, #0
1a001288:	f8ad 6006 	strh.w	r6, [sp, #6]

   Chip_ADC_EnableChannel(LPC_ADC0, lpcAdcChannel, ENABLE);
1a00128c:	4d10      	ldr	r5, [pc, #64]	; (1a0012d0 <adcRead+0x54>)
1a00128e:	2201      	movs	r2, #1
1a001290:	4621      	mov	r1, r4
1a001292:	4628      	mov	r0, r5
1a001294:	f7ff fa2f 	bl	1a0006f6 <Chip_ADC_EnableChannel>
   Chip_ADC_SetStartMode(LPC_ADC0, ADC_START_NOW, ADC_TRIGGERMODE_RISING);
1a001298:	4632      	mov	r2, r6
1a00129a:	2101      	movs	r1, #1
1a00129c:	4628      	mov	r0, r5
1a00129e:	f7ff fa01 	bl	1a0006a4 <Chip_ADC_SetStartMode>

   while(
      (Chip_ADC_ReadStatus(LPC_ADC0, lpcAdcChannel, ADC_DR_DONE_STAT) != SET)
1a0012a2:	2200      	movs	r2, #0
1a0012a4:	4621      	mov	r1, r4
1a0012a6:	480a      	ldr	r0, [pc, #40]	; (1a0012d0 <adcRead+0x54>)
1a0012a8:	f7ff f9d1 	bl	1a00064e <Chip_ADC_ReadStatus>
   while(
1a0012ac:	2801      	cmp	r0, #1
1a0012ae:	d1f8      	bne.n	1a0012a2 <adcRead+0x26>
   );
   Chip_ADC_ReadValue( LPC_ADC0, lpcAdcChannel, &analogValue );
1a0012b0:	4d07      	ldr	r5, [pc, #28]	; (1a0012d0 <adcRead+0x54>)
1a0012b2:	f10d 0206 	add.w	r2, sp, #6
1a0012b6:	4621      	mov	r1, r4
1a0012b8:	4628      	mov	r0, r5
1a0012ba:	f7ff f9c4 	bl	1a000646 <Chip_ADC_ReadValue>

   Chip_ADC_EnableChannel( LPC_ADC0, lpcAdcChannel, DISABLE );
1a0012be:	2200      	movs	r2, #0
1a0012c0:	4621      	mov	r1, r4
1a0012c2:	4628      	mov	r0, r5
1a0012c4:	f7ff fa17 	bl	1a0006f6 <Chip_ADC_EnableChannel>

   return analogValue;
}
1a0012c8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
1a0012cc:	b002      	add	sp, #8
1a0012ce:	bd70      	pop	{r4, r5, r6, pc}
1a0012d0:	400e3000 	.word	0x400e3000

1a0012d4 <boardConfig>:
/*==================[internal functions definition]==========================*/

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardConfig(void) {
1a0012d4:	b508      	push	{r3, lr}

   /* Read clock settings and update SystemCoreClock variable */
   SystemCoreClockUpdate();
1a0012d6:	f7ff fa33 	bl	1a000740 <SystemCoreClockUpdate>

   Board_Init(); // From Board module (modules/lpc4337_m4/board)
1a0012da:	f7ff fed9 	bl	1a001090 <Board_Init>

   /* Inicializar el conteo de Ticks con resolución de 1ms, sin tickHook */
   tickConfig( 1, 0 );
1a0012de:	2200      	movs	r2, #0
1a0012e0:	2001      	movs	r0, #1
1a0012e2:	2100      	movs	r1, #0
1a0012e4:	f000 f970 	bl	1a0015c8 <tickConfig>

   /* Inicializar GPIOs */
   gpioConfig( 0, GPIO_ENABLE );
1a0012e8:	2105      	movs	r1, #5
1a0012ea:	2000      	movs	r0, #0
1a0012ec:	f000 f886 	bl	1a0013fc <gpioConfig>

   /* Configuración de pines de entrada para Teclas de la EDU-CIAA-NXP */
   gpioConfig( TEC1, GPIO_INPUT );
1a0012f0:	2100      	movs	r1, #0
1a0012f2:	2024      	movs	r0, #36	; 0x24
1a0012f4:	f000 f882 	bl	1a0013fc <gpioConfig>
   gpioConfig( TEC2, GPIO_INPUT );
1a0012f8:	2100      	movs	r1, #0
1a0012fa:	2025      	movs	r0, #37	; 0x25
1a0012fc:	f000 f87e 	bl	1a0013fc <gpioConfig>
   gpioConfig( TEC3, GPIO_INPUT );
1a001300:	2100      	movs	r1, #0
1a001302:	2026      	movs	r0, #38	; 0x26
1a001304:	f000 f87a 	bl	1a0013fc <gpioConfig>
   gpioConfig( TEC4, GPIO_INPUT );
1a001308:	2100      	movs	r1, #0
1a00130a:	2027      	movs	r0, #39	; 0x27
1a00130c:	f000 f876 	bl	1a0013fc <gpioConfig>

   /* Configuración de pines de salida para Leds de la EDU-CIAA-NXP */
   gpioConfig( LEDR, GPIO_OUTPUT );
1a001310:	2101      	movs	r1, #1
1a001312:	2028      	movs	r0, #40	; 0x28
1a001314:	f000 f872 	bl	1a0013fc <gpioConfig>
   gpioConfig( LEDG, GPIO_OUTPUT );
1a001318:	2101      	movs	r1, #1
1a00131a:	2029      	movs	r0, #41	; 0x29
1a00131c:	f000 f86e 	bl	1a0013fc <gpioConfig>
   gpioConfig( LEDB, GPIO_OUTPUT );
1a001320:	2101      	movs	r1, #1
1a001322:	202a      	movs	r0, #42	; 0x2a
1a001324:	f000 f86a 	bl	1a0013fc <gpioConfig>
   gpioConfig( LED1, GPIO_OUTPUT );
1a001328:	2101      	movs	r1, #1
1a00132a:	202b      	movs	r0, #43	; 0x2b
1a00132c:	f000 f866 	bl	1a0013fc <gpioConfig>
   gpioConfig( LED2, GPIO_OUTPUT );
1a001330:	2101      	movs	r1, #1
1a001332:	202c      	movs	r0, #44	; 0x2c
1a001334:	f000 f862 	bl	1a0013fc <gpioConfig>
   gpioConfig( LED3, GPIO_OUTPUT );
1a001338:	2101      	movs	r1, #1
1a00133a:	202d      	movs	r0, #45	; 0x2d
1a00133c:	f000 f85e 	bl	1a0013fc <gpioConfig>


   /* Configuración de pines de entrada de la CIAA-NXP */
   gpioConfig( DI0, GPIO_INPUT );
1a001340:	2100      	movs	r1, #0
1a001342:	202e      	movs	r0, #46	; 0x2e
1a001344:	f000 f85a 	bl	1a0013fc <gpioConfig>
   gpioConfig( DI1, GPIO_INPUT );
1a001348:	2100      	movs	r1, #0
1a00134a:	202f      	movs	r0, #47	; 0x2f
1a00134c:	f000 f856 	bl	1a0013fc <gpioConfig>
   gpioConfig( DI2, GPIO_INPUT );
1a001350:	2100      	movs	r1, #0
1a001352:	2030      	movs	r0, #48	; 0x30
1a001354:	f000 f852 	bl	1a0013fc <gpioConfig>
   gpioConfig( DI3, GPIO_INPUT );
1a001358:	2100      	movs	r1, #0
1a00135a:	2031      	movs	r0, #49	; 0x31
1a00135c:	f000 f84e 	bl	1a0013fc <gpioConfig>
   gpioConfig( DI4, GPIO_INPUT );
1a001360:	2100      	movs	r1, #0
1a001362:	2032      	movs	r0, #50	; 0x32
1a001364:	f000 f84a 	bl	1a0013fc <gpioConfig>
   gpioConfig( DI5, GPIO_INPUT );
1a001368:	2100      	movs	r1, #0
1a00136a:	2033      	movs	r0, #51	; 0x33
1a00136c:	f000 f846 	bl	1a0013fc <gpioConfig>
   gpioConfig( DI6, GPIO_INPUT );
1a001370:	2100      	movs	r1, #0
1a001372:	2034      	movs	r0, #52	; 0x34
1a001374:	f000 f842 	bl	1a0013fc <gpioConfig>
   gpioConfig( DI7, GPIO_INPUT );
1a001378:	2100      	movs	r1, #0
1a00137a:	2035      	movs	r0, #53	; 0x35
1a00137c:	f000 f83e 	bl	1a0013fc <gpioConfig>

   /* Configuración de pines de salida de la CIAA-NXP */
   gpioConfig( DO0, GPIO_OUTPUT );
1a001380:	2101      	movs	r1, #1
1a001382:	2036      	movs	r0, #54	; 0x36
1a001384:	f000 f83a 	bl	1a0013fc <gpioConfig>
   gpioConfig( DO1, GPIO_OUTPUT );
1a001388:	2101      	movs	r1, #1
1a00138a:	2037      	movs	r0, #55	; 0x37
1a00138c:	f000 f836 	bl	1a0013fc <gpioConfig>
   gpioConfig( DO2, GPIO_OUTPUT );
1a001390:	2101      	movs	r1, #1
1a001392:	2038      	movs	r0, #56	; 0x38
1a001394:	f000 f832 	bl	1a0013fc <gpioConfig>
   gpioConfig( DO3, GPIO_OUTPUT );
1a001398:	2101      	movs	r1, #1
1a00139a:	2039      	movs	r0, #57	; 0x39
1a00139c:	f000 f82e 	bl	1a0013fc <gpioConfig>
   gpioConfig( DO4, GPIO_OUTPUT );
1a0013a0:	2101      	movs	r1, #1
1a0013a2:	203a      	movs	r0, #58	; 0x3a
1a0013a4:	f000 f82a 	bl	1a0013fc <gpioConfig>
   gpioConfig( DO5, GPIO_OUTPUT );
1a0013a8:	2101      	movs	r1, #1
1a0013aa:	203b      	movs	r0, #59	; 0x3b
1a0013ac:	f000 f826 	bl	1a0013fc <gpioConfig>
   gpioConfig( DO6, GPIO_OUTPUT );
1a0013b0:	2101      	movs	r1, #1
1a0013b2:	203c      	movs	r0, #60	; 0x3c
1a0013b4:	f000 f822 	bl	1a0013fc <gpioConfig>
   gpioConfig( DO7, GPIO_OUTPUT );
1a0013b8:	2101      	movs	r1, #1
1a0013ba:	203d      	movs	r0, #61	; 0x3d
1a0013bc:	f000 f81e 	bl	1a0013fc <gpioConfig>
1a0013c0:	bd08      	pop	{r3, pc}

1a0013c2 <sAPI_NullFuncPtr>:
 * param:  void * - Not used
 * return: bool_t - Return always true
 */
bool_t sAPI_NullFuncPtr(void *ptr){
   return 1;
}
1a0013c2:	2001      	movs	r0, #1
1a0013c4:	4770      	bx	lr
1a0013c6:	Address 0x1a0013c6 is out of bounds.


1a0013c8 <gpioObtainPinConfig>:
/*==================[internal functions definition]==========================*/

static void gpioObtainPinConfig( gpioMap_t pin,
                                int8_t *pinNamePort, int8_t *pinNamePin,
																int8_t *func, int8_t *gpioPort,
																int8_t *gpioPin ){
1a0013c8:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsConfig[pin].pinName.port;
1a0013ca:	4d0b      	ldr	r5, [pc, #44]	; (1a0013f8 <gpioObtainPinConfig+0x30>)
1a0013cc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a0013d0:	182c      	adds	r4, r5, r0
1a0013d2:	5628      	ldrsb	r0, [r5, r0]
1a0013d4:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsConfig[pin].pinName.pin;
1a0013d6:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a0013da:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsConfig[pin].func;
1a0013dc:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a0013e0:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsConfig[pin].gpio.port;
1a0013e2:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a0013e6:	9b02      	ldr	r3, [sp, #8]
1a0013e8:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsConfig[pin].gpio.pin;
1a0013ea:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a0013ee:	9b03      	ldr	r3, [sp, #12]
1a0013f0:	701a      	strb	r2, [r3, #0]
}
1a0013f2:	bc30      	pop	{r4, r5}
1a0013f4:	4770      	bx	lr
1a0013f6:	bf00      	nop
1a0013f8:	1a001be4 	.word	0x1a001be4

1a0013fc <gpioConfig>:

/*==================[external functions definition]==========================*/

bool_t gpioConfig( gpioMap_t pin, gpioConfig_t config ){
1a0013fc:	b530      	push	{r4, r5, lr}
1a0013fe:	b085      	sub	sp, #20
1a001400:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a001402:	2300      	movs	r3, #0
1a001404:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001408:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a00140c:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001410:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001414:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinConfig( pin, &pinNamePort, &pinNamePin, &func,
1a001418:	f10d 030b 	add.w	r3, sp, #11
1a00141c:	9301      	str	r3, [sp, #4]
1a00141e:	ab03      	add	r3, sp, #12
1a001420:	9300      	str	r3, [sp, #0]
1a001422:	f10d 030d 	add.w	r3, sp, #13
1a001426:	f10d 020e 	add.w	r2, sp, #14
1a00142a:	f10d 010f 	add.w	r1, sp, #15
1a00142e:	f7ff ffcb 	bl	1a0013c8 <gpioObtainPinConfig>
                           &gpioPort, &gpioPin );

   switch(config){
1a001432:	2c05      	cmp	r4, #5
1a001434:	f200 8096 	bhi.w	1a001564 <gpioConfig+0x168>
1a001438:	e8df f004 	tbb	[pc, r4]
1a00143c:	3d237109 	.word	0x3d237109
1a001440:	0357      	.short	0x0357

      case GPIO_ENABLE:
		   /* Initializes GPIO */
		   Chip_GPIO_Init(LPC_GPIO_PORT);
1a001442:	4849      	ldr	r0, [pc, #292]	; (1a001568 <gpioConfig+0x16c>)
1a001444:	f7ff fc70 	bl	1a000d28 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a001448:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a00144a:	b005      	add	sp, #20
1a00144c:	bd30      	pop	{r4, r5, pc}
         Chip_SCU_PinMux(
1a00144e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001452:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001456:	f89d 200d 	ldrb.w	r2, [sp, #13]
   LPC_SCU->SFSP[port][pin] = modefunc;
1a00145a:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00145e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001462:	4942      	ldr	r1, [pc, #264]	; (1a00156c <gpioConfig+0x170>)
1a001464:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001468:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00146c:	2401      	movs	r4, #1
1a00146e:	2300      	movs	r3, #0
1a001470:	fa04 f202 	lsl.w	r2, r4, r2
1a001474:	f89d 100c 	ldrb.w	r1, [sp, #12]
1a001478:	483b      	ldr	r0, [pc, #236]	; (1a001568 <gpioConfig+0x16c>)
1a00147a:	f7ff fc56 	bl	1a000d2a <Chip_GPIO_SetDir>
   bool_t ret_val     = 1;
1a00147e:	4620      	mov	r0, r4
      break;
1a001480:	e7e3      	b.n	1a00144a <gpioConfig+0x4e>
         Chip_SCU_PinMux(
1a001482:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001486:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00148a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00148e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a001492:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001496:	4935      	ldr	r1, [pc, #212]	; (1a00156c <gpioConfig+0x170>)
1a001498:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00149c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0014a0:	2401      	movs	r4, #1
1a0014a2:	2300      	movs	r3, #0
1a0014a4:	fa04 f202 	lsl.w	r2, r4, r2
1a0014a8:	f89d 100c 	ldrb.w	r1, [sp, #12]
1a0014ac:	482e      	ldr	r0, [pc, #184]	; (1a001568 <gpioConfig+0x16c>)
1a0014ae:	f7ff fc3c 	bl	1a000d2a <Chip_GPIO_SetDir>
   bool_t ret_val     = 1;
1a0014b2:	4620      	mov	r0, r4
      break;
1a0014b4:	e7c9      	b.n	1a00144a <gpioConfig+0x4e>
         Chip_SCU_PinMux(
1a0014b6:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0014ba:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0014be:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0014c2:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a0014c6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0014ca:	4928      	ldr	r1, [pc, #160]	; (1a00156c <gpioConfig+0x170>)
1a0014cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0014d0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0014d4:	2401      	movs	r4, #1
1a0014d6:	2300      	movs	r3, #0
1a0014d8:	fa04 f202 	lsl.w	r2, r4, r2
1a0014dc:	f89d 100c 	ldrb.w	r1, [sp, #12]
1a0014e0:	4821      	ldr	r0, [pc, #132]	; (1a001568 <gpioConfig+0x16c>)
1a0014e2:	f7ff fc22 	bl	1a000d2a <Chip_GPIO_SetDir>
   bool_t ret_val     = 1;
1a0014e6:	4620      	mov	r0, r4
      break;
1a0014e8:	e7af      	b.n	1a00144a <gpioConfig+0x4e>
         Chip_SCU_PinMux(
1a0014ea:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0014ee:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0014f2:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0014f6:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a0014fa:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0014fe:	491b      	ldr	r1, [pc, #108]	; (1a00156c <gpioConfig+0x170>)
1a001500:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001504:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001508:	2401      	movs	r4, #1
1a00150a:	2300      	movs	r3, #0
1a00150c:	fa04 f202 	lsl.w	r2, r4, r2
1a001510:	f89d 100c 	ldrb.w	r1, [sp, #12]
1a001514:	4814      	ldr	r0, [pc, #80]	; (1a001568 <gpioConfig+0x16c>)
1a001516:	f7ff fc08 	bl	1a000d2a <Chip_GPIO_SetDir>
   bool_t ret_val     = 1;
1a00151a:	4620      	mov	r0, r4
      break;
1a00151c:	e795      	b.n	1a00144a <gpioConfig+0x4e>
         Chip_SCU_PinMux(
1a00151e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001522:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001526:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00152a:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00152e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001532:	490e      	ldr	r1, [pc, #56]	; (1a00156c <gpioConfig+0x170>)
1a001534:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a001538:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00153c:	2401      	movs	r4, #1
1a00153e:	4d0a      	ldr	r5, [pc, #40]	; (1a001568 <gpioConfig+0x16c>)
1a001540:	4623      	mov	r3, r4
1a001542:	fa04 f202 	lsl.w	r2, r4, r2
1a001546:	f89d 100c 	ldrb.w	r1, [sp, #12]
1a00154a:	4628      	mov	r0, r5
1a00154c:	f7ff fbed 	bl	1a000d2a <Chip_GPIO_SetDir>
         Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a001550:	f89d 200c 	ldrb.w	r2, [sp, #12]
1a001554:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a001558:	eb05 1542 	add.w	r5, r5, r2, lsl #5
1a00155c:	2200      	movs	r2, #0
1a00155e:	54ea      	strb	r2, [r5, r3]
   bool_t ret_val     = 1;
1a001560:	4620      	mov	r0, r4
1a001562:	e772      	b.n	1a00144a <gpioConfig+0x4e>
         ret_val = 0;
1a001564:	2000      	movs	r0, #0
1a001566:	e770      	b.n	1a00144a <gpioConfig+0x4e>
1a001568:	400f4000 	.word	0x400f4000
1a00156c:	40086000 	.word	0x40086000

1a001570 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value ){
1a001570:	b510      	push	{r4, lr}
1a001572:	b084      	sub	sp, #16
1a001574:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a001576:	2300      	movs	r3, #0
1a001578:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a00157c:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001580:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001584:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001588:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinConfig( pin, &pinNamePort, &pinNamePin, &func,
1a00158c:	f10d 030b 	add.w	r3, sp, #11
1a001590:	9301      	str	r3, [sp, #4]
1a001592:	ab03      	add	r3, sp, #12
1a001594:	9300      	str	r3, [sp, #0]
1a001596:	f10d 030d 	add.w	r3, sp, #13
1a00159a:	f10d 020e 	add.w	r2, sp, #14
1a00159e:	f10d 010f 	add.w	r1, sp, #15
1a0015a2:	f7ff ff11 	bl	1a0013c8 <gpioObtainPinConfig>
                           &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a0015a6:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0015aa:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a0015ae:	3400      	adds	r4, #0
1a0015b0:	bf18      	it	ne
1a0015b2:	2401      	movne	r4, #1
1a0015b4:	015b      	lsls	r3, r3, #5
1a0015b6:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0015ba:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0015be:	549c      	strb	r4, [r3, r2]

   return ret_val;
}
1a0015c0:	2001      	movs	r0, #1
1a0015c2:	b004      	add	sp, #16
1a0015c4:	bd10      	pop	{r4, pc}
1a0015c6:	Address 0x1a0015c6 is out of bounds.


1a0015c8 <tickConfig>:
/*==================[internal functions definition]==========================*/

/*==================[external functions definition]==========================*/

/* Tick rate configuration 1 to 50 ms */
bool_t tickConfig(tick_t tickRateMSvalue, sAPI_FuncPtr_t tickHook ) {
1a0015c8:	b508      	push	{r3, lr}

   bool_t ret_val = 1;
   tick_t tickRateHz = 0;

   if( tickHook ){
1a0015ca:	b112      	cbz	r2, 1a0015d2 <tickConfig+0xa>
1a0015cc:	4613      	mov	r3, r2
      tickHookFunction = tickHook;
1a0015ce:	4a17      	ldr	r2, [pc, #92]	; (1a00162c <tickConfig+0x64>)
1a0015d0:	6013      	str	r3, [r2, #0]
   }

   if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ){
1a0015d2:	f110 32ff 	adds.w	r2, r0, #4294967295
1a0015d6:	f141 33ff 	adc.w	r3, r1, #4294967295
1a0015da:	2b00      	cmp	r3, #0
1a0015dc:	bf08      	it	eq
1a0015de:	2a32      	cmpeq	r2, #50	; 0x32
1a0015e0:	d220      	bcs.n	1a001624 <tickConfig+0x5c>
1a0015e2:	4602      	mov	r2, r0
1a0015e4:	460b      	mov	r3, r1

		tickRateMS = tickRateMSvalue;
1a0015e6:	4912      	ldr	r1, [pc, #72]	; (1a001630 <tickConfig+0x68>)
1a0015e8:	e9c1 2300 	strd	r2, r3, [r1]
      tickRateHz = 1000 => 1000 ticks per second =>  1 ms tick
      tickRateHz =  200 =>  200 ticks per second =>  5 ms tick
      tickRateHz =  100 =>  100 ticks per second => 10 ms tick
      tickRateHz =   20 =>   20 ticks per second => 50 ms tick
      */
      tickRateHz = 1000 / tickRateMSvalue;
1a0015ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a0015f0:	2100      	movs	r1, #0
1a0015f2:	f000 f8bf 	bl	1a001774 <__aeabi_uldivmod>

      /* Init SysTick interrupt, tickRateHz ticks per second */
      SysTick_Config( SystemCoreClock / tickRateHz);
1a0015f6:	4602      	mov	r2, r0
1a0015f8:	460b      	mov	r3, r1
1a0015fa:	490e      	ldr	r1, [pc, #56]	; (1a001634 <tickConfig+0x6c>)
1a0015fc:	6808      	ldr	r0, [r1, #0]
1a0015fe:	2100      	movs	r1, #0
1a001600:	f000 f8b8 	bl	1a001774 <__aeabi_uldivmod>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
1a001604:	3801      	subs	r0, #1
1a001606:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a00160a:	d20d      	bcs.n	1a001628 <tickConfig+0x60>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
1a00160c:	4b0a      	ldr	r3, [pc, #40]	; (1a001638 <tickConfig+0x70>)
1a00160e:	6058      	str	r0, [r3, #4]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
1a001610:	21e0      	movs	r1, #224	; 0xe0
1a001612:	4a0a      	ldr	r2, [pc, #40]	; (1a00163c <tickConfig+0x74>)
1a001614:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
1a001618:	2200      	movs	r2, #0
1a00161a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a00161c:	2207      	movs	r2, #7
1a00161e:	601a      	str	r2, [r3, #0]
   bool_t ret_val = 1;
1a001620:	2001      	movs	r0, #1
1a001622:	bd08      	pop	{r3, pc}
   }
   else{
      /* Error, tickRateMS variable not in range (1 <= tickRateMS <= 50) */
      ret_val = 0;
1a001624:	2000      	movs	r0, #0
1a001626:	bd08      	pop	{r3, pc}
   bool_t ret_val = 1;
1a001628:	2001      	movs	r0, #1
   }

   return ret_val;
}
1a00162a:	bd08      	pop	{r3, pc}
1a00162c:	10000014 	.word	0x10000014
1a001630:	10000078 	.word	0x10000078
1a001634:	10000068 	.word	0x10000068
1a001638:	e000e010 	.word	0xe000e010
1a00163c:	e000ed00 	.word	0xe000ed00

1a001640 <SysTick_Handler>:
/*==================[ISR external functions definition]======================*/

//__attribute__ ((section(".after_vectors")))

/* SysTick Timer ISR Handler */
void SysTick_Handler(void) {
1a001640:	b508      	push	{r3, lr}
   tickCounter++;
1a001642:	4906      	ldr	r1, [pc, #24]	; (1a00165c <SysTick_Handler+0x1c>)
1a001644:	e9d1 2300 	ldrd	r2, r3, [r1]
1a001648:	3201      	adds	r2, #1
1a00164a:	f143 0300 	adc.w	r3, r3, #0
1a00164e:	e9c1 2300 	strd	r2, r3, [r1]

	/* Execute Tick Hook function */
	(* tickHookFunction )( 0 );
1a001652:	4b03      	ldr	r3, [pc, #12]	; (1a001660 <SysTick_Handler+0x20>)
1a001654:	681b      	ldr	r3, [r3, #0]
1a001656:	2000      	movs	r0, #0
1a001658:	4798      	blx	r3
1a00165a:	bd08      	pop	{r3, pc}
1a00165c:	10000070 	.word	0x10000070
1a001660:	10000014 	.word	0x10000014

1a001664 <errorOcurred>:
/*==================[internal functions definition]==========================*/

/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred(void){
1a001664:	e7fe      	b.n	1a001664 <errorOcurred>

1a001666 <doNothing>:
   while(1);
}

static void doNothing(void){
1a001666:	4770      	bx	lr

1a001668 <TIMER0_IRQHandler>:
/*==================[ISR external functions definition]======================*/
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void){
1a001668:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00166a:	2400      	movs	r4, #0
1a00166c:	e001      	b.n	1a001672 <TIMER0_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ){
1a00166e:	3401      	adds	r4, #1
1a001670:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001672:	2c03      	cmp	r4, #3
1a001674:	d812      	bhi.n	1a00169c <TIMER0_IRQHandler+0x34>
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ){
1a001676:	b265      	sxtb	r5, r4
 * @note   Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
   return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a001678:	4b09      	ldr	r3, [pc, #36]	; (1a0016a0 <TIMER0_IRQHandler+0x38>)
1a00167a:	681a      	ldr	r2, [r3, #0]
1a00167c:	f004 010f 	and.w	r1, r4, #15
1a001680:	2301      	movs	r3, #1
1a001682:	408b      	lsls	r3, r1
1a001684:	421a      	tst	r2, r3
1a001686:	d0f2      	beq.n	1a00166e <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])();
1a001688:	4b06      	ldr	r3, [pc, #24]	; (1a0016a4 <TIMER0_IRQHandler+0x3c>)
1a00168a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a00168e:	4798      	blx	r3
 * @return Nothing
 * @note   Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
   pTMR->IR = TIMER_IR_CLR(matchnum);
1a001690:	2301      	movs	r3, #1
1a001692:	fa03 f505 	lsl.w	r5, r3, r5
1a001696:	4b02      	ldr	r3, [pc, #8]	; (1a0016a0 <TIMER0_IRQHandler+0x38>)
1a001698:	601d      	str	r5, [r3, #0]
1a00169a:	e7e8      	b.n	1a00166e <TIMER0_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a00169c:	bd38      	pop	{r3, r4, r5, pc}
1a00169e:	bf00      	nop
1a0016a0:	40084000 	.word	0x40084000
1a0016a4:	10000018 	.word	0x10000018

1a0016a8 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void ){
1a0016a8:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0016aa:	2400      	movs	r4, #0
1a0016ac:	e001      	b.n	1a0016b2 <TIMER1_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ){
1a0016ae:	3401      	adds	r4, #1
1a0016b0:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0016b2:	2c03      	cmp	r4, #3
1a0016b4:	d813      	bhi.n	1a0016de <TIMER1_IRQHandler+0x36>
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ){
1a0016b6:	b265      	sxtb	r5, r4
   return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0016b8:	4b09      	ldr	r3, [pc, #36]	; (1a0016e0 <TIMER1_IRQHandler+0x38>)
1a0016ba:	681a      	ldr	r2, [r3, #0]
1a0016bc:	f004 010f 	and.w	r1, r4, #15
1a0016c0:	2301      	movs	r3, #1
1a0016c2:	408b      	lsls	r3, r1
1a0016c4:	421a      	tst	r2, r3
1a0016c6:	d0f2      	beq.n	1a0016ae <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])();
1a0016c8:	1d23      	adds	r3, r4, #4
1a0016ca:	4a06      	ldr	r2, [pc, #24]	; (1a0016e4 <TIMER1_IRQHandler+0x3c>)
1a0016cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0016d0:	4798      	blx	r3
   pTMR->IR = TIMER_IR_CLR(matchnum);
1a0016d2:	2301      	movs	r3, #1
1a0016d4:	fa03 f505 	lsl.w	r5, r3, r5
1a0016d8:	4b01      	ldr	r3, [pc, #4]	; (1a0016e0 <TIMER1_IRQHandler+0x38>)
1a0016da:	601d      	str	r5, [r3, #0]
1a0016dc:	e7e7      	b.n	1a0016ae <TIMER1_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a0016de:	bd38      	pop	{r3, r4, r5, pc}
1a0016e0:	40085000 	.word	0x40085000
1a0016e4:	10000018 	.word	0x10000018

1a0016e8 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void ){
1a0016e8:	b538      	push	{r3, r4, r5, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0016ea:	2400      	movs	r4, #0
1a0016ec:	e001      	b.n	1a0016f2 <TIMER2_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ){
1a0016ee:	3401      	adds	r4, #1
1a0016f0:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0016f2:	2c03      	cmp	r4, #3
1a0016f4:	d814      	bhi.n	1a001720 <TIMER2_IRQHandler+0x38>
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ){
1a0016f6:	b265      	sxtb	r5, r4
   return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0016f8:	4b0a      	ldr	r3, [pc, #40]	; (1a001724 <TIMER2_IRQHandler+0x3c>)
1a0016fa:	681a      	ldr	r2, [r3, #0]
1a0016fc:	f004 010f 	and.w	r1, r4, #15
1a001700:	2301      	movs	r3, #1
1a001702:	408b      	lsls	r3, r1
1a001704:	421a      	tst	r2, r3
1a001706:	d0f2      	beq.n	1a0016ee <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])();
1a001708:	f104 0308 	add.w	r3, r4, #8
1a00170c:	4a06      	ldr	r2, [pc, #24]	; (1a001728 <TIMER2_IRQHandler+0x40>)
1a00170e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a001712:	4798      	blx	r3
   pTMR->IR = TIMER_IR_CLR(matchnum);
1a001714:	2301      	movs	r3, #1
1a001716:	fa03 f505 	lsl.w	r5, r3, r5
1a00171a:	4b02      	ldr	r3, [pc, #8]	; (1a001724 <TIMER2_IRQHandler+0x3c>)
1a00171c:	601d      	str	r5, [r3, #0]
1a00171e:	e7e6      	b.n	1a0016ee <TIMER2_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a001720:	bd38      	pop	{r3, r4, r5, pc}
1a001722:	bf00      	nop
1a001724:	400c3000 	.word	0x400c3000
1a001728:	10000018 	.word	0x10000018

1a00172c <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void ){
1a00172c:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00172e:	2400      	movs	r4, #0
1a001730:	e001      	b.n	1a001736 <TIMER3_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ){
1a001732:	3401      	adds	r4, #1
1a001734:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001736:	2c03      	cmp	r4, #3
1a001738:	d814      	bhi.n	1a001764 <TIMER3_IRQHandler+0x38>
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)){
1a00173a:	b265      	sxtb	r5, r4
   return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a00173c:	4b0a      	ldr	r3, [pc, #40]	; (1a001768 <TIMER3_IRQHandler+0x3c>)
1a00173e:	681a      	ldr	r2, [r3, #0]
1a001740:	f004 010f 	and.w	r1, r4, #15
1a001744:	2301      	movs	r3, #1
1a001746:	408b      	lsls	r3, r1
1a001748:	421a      	tst	r2, r3
1a00174a:	d0f2      	beq.n	1a001732 <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])();
1a00174c:	f104 030c 	add.w	r3, r4, #12
1a001750:	4a06      	ldr	r2, [pc, #24]	; (1a00176c <TIMER3_IRQHandler+0x40>)
1a001752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a001756:	4798      	blx	r3
   pTMR->IR = TIMER_IR_CLR(matchnum);
1a001758:	2301      	movs	r3, #1
1a00175a:	fa03 f505 	lsl.w	r5, r3, r5
1a00175e:	4b02      	ldr	r3, [pc, #8]	; (1a001768 <TIMER3_IRQHandler+0x3c>)
1a001760:	601d      	str	r5, [r3, #0]
1a001762:	e7e6      	b.n	1a001732 <TIMER3_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a001764:	bd38      	pop	{r3, r4, r5, pc}
1a001766:	bf00      	nop
1a001768:	400c4000 	.word	0x400c4000
1a00176c:	10000018 	.word	0x10000018

1a001770 <UART2_IRQHandler>:
}

/* 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26) */
void UART2_IRQHandler(void){
1a001770:	4770      	bx	lr

1a001772 <UART3_IRQHandler>:
}

/* 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27) */
void UART3_IRQHandler(void){
1a001772:	4770      	bx	lr

1a001774 <__aeabi_uldivmod>:
1a001774:	b953      	cbnz	r3, 1a00178c <__aeabi_uldivmod+0x18>
1a001776:	b94a      	cbnz	r2, 1a00178c <__aeabi_uldivmod+0x18>
1a001778:	2900      	cmp	r1, #0
1a00177a:	bf08      	it	eq
1a00177c:	2800      	cmpeq	r0, #0
1a00177e:	bf1c      	itt	ne
1a001780:	f04f 31ff 	movne.w	r1, #4294967295
1a001784:	f04f 30ff 	movne.w	r0, #4294967295
1a001788:	f000 b97a 	b.w	1a001a80 <__aeabi_idiv0>
1a00178c:	f1ad 0c08 	sub.w	ip, sp, #8
1a001790:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a001794:	f000 f806 	bl	1a0017a4 <__udivmoddi4>
1a001798:	f8dd e004 	ldr.w	lr, [sp, #4]
1a00179c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0017a0:	b004      	add	sp, #16
1a0017a2:	4770      	bx	lr

1a0017a4 <__udivmoddi4>:
1a0017a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0017a8:	468c      	mov	ip, r1
1a0017aa:	460d      	mov	r5, r1
1a0017ac:	4604      	mov	r4, r0
1a0017ae:	9e08      	ldr	r6, [sp, #32]
1a0017b0:	2b00      	cmp	r3, #0
1a0017b2:	d151      	bne.n	1a001858 <__udivmoddi4+0xb4>
1a0017b4:	428a      	cmp	r2, r1
1a0017b6:	4617      	mov	r7, r2
1a0017b8:	d96d      	bls.n	1a001896 <__udivmoddi4+0xf2>
1a0017ba:	fab2 fe82 	clz	lr, r2
1a0017be:	f1be 0f00 	cmp.w	lr, #0
1a0017c2:	d00b      	beq.n	1a0017dc <__udivmoddi4+0x38>
1a0017c4:	f1ce 0c20 	rsb	ip, lr, #32
1a0017c8:	fa01 f50e 	lsl.w	r5, r1, lr
1a0017cc:	fa20 fc0c 	lsr.w	ip, r0, ip
1a0017d0:	fa02 f70e 	lsl.w	r7, r2, lr
1a0017d4:	ea4c 0c05 	orr.w	ip, ip, r5
1a0017d8:	fa00 f40e 	lsl.w	r4, r0, lr
1a0017dc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
1a0017e0:	0c25      	lsrs	r5, r4, #16
1a0017e2:	fbbc f8fa 	udiv	r8, ip, sl
1a0017e6:	fa1f f987 	uxth.w	r9, r7
1a0017ea:	fb0a cc18 	mls	ip, sl, r8, ip
1a0017ee:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
1a0017f2:	fb08 f309 	mul.w	r3, r8, r9
1a0017f6:	42ab      	cmp	r3, r5
1a0017f8:	d90a      	bls.n	1a001810 <__udivmoddi4+0x6c>
1a0017fa:	19ed      	adds	r5, r5, r7
1a0017fc:	f108 32ff 	add.w	r2, r8, #4294967295
1a001800:	f080 8123 	bcs.w	1a001a4a <__udivmoddi4+0x2a6>
1a001804:	42ab      	cmp	r3, r5
1a001806:	f240 8120 	bls.w	1a001a4a <__udivmoddi4+0x2a6>
1a00180a:	f1a8 0802 	sub.w	r8, r8, #2
1a00180e:	443d      	add	r5, r7
1a001810:	1aed      	subs	r5, r5, r3
1a001812:	b2a4      	uxth	r4, r4
1a001814:	fbb5 f0fa 	udiv	r0, r5, sl
1a001818:	fb0a 5510 	mls	r5, sl, r0, r5
1a00181c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
1a001820:	fb00 f909 	mul.w	r9, r0, r9
1a001824:	45a1      	cmp	r9, r4
1a001826:	d909      	bls.n	1a00183c <__udivmoddi4+0x98>
1a001828:	19e4      	adds	r4, r4, r7
1a00182a:	f100 33ff 	add.w	r3, r0, #4294967295
1a00182e:	f080 810a 	bcs.w	1a001a46 <__udivmoddi4+0x2a2>
1a001832:	45a1      	cmp	r9, r4
1a001834:	f240 8107 	bls.w	1a001a46 <__udivmoddi4+0x2a2>
1a001838:	3802      	subs	r0, #2
1a00183a:	443c      	add	r4, r7
1a00183c:	eba4 0409 	sub.w	r4, r4, r9
1a001840:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
1a001844:	2100      	movs	r1, #0
1a001846:	2e00      	cmp	r6, #0
1a001848:	d061      	beq.n	1a00190e <__udivmoddi4+0x16a>
1a00184a:	fa24 f40e 	lsr.w	r4, r4, lr
1a00184e:	2300      	movs	r3, #0
1a001850:	6034      	str	r4, [r6, #0]
1a001852:	6073      	str	r3, [r6, #4]
1a001854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001858:	428b      	cmp	r3, r1
1a00185a:	d907      	bls.n	1a00186c <__udivmoddi4+0xc8>
1a00185c:	2e00      	cmp	r6, #0
1a00185e:	d054      	beq.n	1a00190a <__udivmoddi4+0x166>
1a001860:	2100      	movs	r1, #0
1a001862:	e886 0021 	stmia.w	r6, {r0, r5}
1a001866:	4608      	mov	r0, r1
1a001868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00186c:	fab3 f183 	clz	r1, r3
1a001870:	2900      	cmp	r1, #0
1a001872:	f040 808e 	bne.w	1a001992 <__udivmoddi4+0x1ee>
1a001876:	42ab      	cmp	r3, r5
1a001878:	d302      	bcc.n	1a001880 <__udivmoddi4+0xdc>
1a00187a:	4282      	cmp	r2, r0
1a00187c:	f200 80fa 	bhi.w	1a001a74 <__udivmoddi4+0x2d0>
1a001880:	1a84      	subs	r4, r0, r2
1a001882:	eb65 0503 	sbc.w	r5, r5, r3
1a001886:	2001      	movs	r0, #1
1a001888:	46ac      	mov	ip, r5
1a00188a:	2e00      	cmp	r6, #0
1a00188c:	d03f      	beq.n	1a00190e <__udivmoddi4+0x16a>
1a00188e:	e886 1010 	stmia.w	r6, {r4, ip}
1a001892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001896:	b912      	cbnz	r2, 1a00189e <__udivmoddi4+0xfa>
1a001898:	2701      	movs	r7, #1
1a00189a:	fbb7 f7f2 	udiv	r7, r7, r2
1a00189e:	fab7 fe87 	clz	lr, r7
1a0018a2:	f1be 0f00 	cmp.w	lr, #0
1a0018a6:	d134      	bne.n	1a001912 <__udivmoddi4+0x16e>
1a0018a8:	1beb      	subs	r3, r5, r7
1a0018aa:	0c3a      	lsrs	r2, r7, #16
1a0018ac:	fa1f fc87 	uxth.w	ip, r7
1a0018b0:	2101      	movs	r1, #1
1a0018b2:	fbb3 f8f2 	udiv	r8, r3, r2
1a0018b6:	0c25      	lsrs	r5, r4, #16
1a0018b8:	fb02 3318 	mls	r3, r2, r8, r3
1a0018bc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
1a0018c0:	fb0c f308 	mul.w	r3, ip, r8
1a0018c4:	42ab      	cmp	r3, r5
1a0018c6:	d907      	bls.n	1a0018d8 <__udivmoddi4+0x134>
1a0018c8:	19ed      	adds	r5, r5, r7
1a0018ca:	f108 30ff 	add.w	r0, r8, #4294967295
1a0018ce:	d202      	bcs.n	1a0018d6 <__udivmoddi4+0x132>
1a0018d0:	42ab      	cmp	r3, r5
1a0018d2:	f200 80d1 	bhi.w	1a001a78 <__udivmoddi4+0x2d4>
1a0018d6:	4680      	mov	r8, r0
1a0018d8:	1aed      	subs	r5, r5, r3
1a0018da:	b2a3      	uxth	r3, r4
1a0018dc:	fbb5 f0f2 	udiv	r0, r5, r2
1a0018e0:	fb02 5510 	mls	r5, r2, r0, r5
1a0018e4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
1a0018e8:	fb0c fc00 	mul.w	ip, ip, r0
1a0018ec:	45a4      	cmp	ip, r4
1a0018ee:	d907      	bls.n	1a001900 <__udivmoddi4+0x15c>
1a0018f0:	19e4      	adds	r4, r4, r7
1a0018f2:	f100 33ff 	add.w	r3, r0, #4294967295
1a0018f6:	d202      	bcs.n	1a0018fe <__udivmoddi4+0x15a>
1a0018f8:	45a4      	cmp	ip, r4
1a0018fa:	f200 80b8 	bhi.w	1a001a6e <__udivmoddi4+0x2ca>
1a0018fe:	4618      	mov	r0, r3
1a001900:	eba4 040c 	sub.w	r4, r4, ip
1a001904:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
1a001908:	e79d      	b.n	1a001846 <__udivmoddi4+0xa2>
1a00190a:	4631      	mov	r1, r6
1a00190c:	4630      	mov	r0, r6
1a00190e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001912:	f1ce 0420 	rsb	r4, lr, #32
1a001916:	fa05 f30e 	lsl.w	r3, r5, lr
1a00191a:	fa07 f70e 	lsl.w	r7, r7, lr
1a00191e:	fa20 f804 	lsr.w	r8, r0, r4
1a001922:	0c3a      	lsrs	r2, r7, #16
1a001924:	fa25 f404 	lsr.w	r4, r5, r4
1a001928:	ea48 0803 	orr.w	r8, r8, r3
1a00192c:	fbb4 f1f2 	udiv	r1, r4, r2
1a001930:	ea4f 4518 	mov.w	r5, r8, lsr #16
1a001934:	fb02 4411 	mls	r4, r2, r1, r4
1a001938:	fa1f fc87 	uxth.w	ip, r7
1a00193c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
1a001940:	fb01 f30c 	mul.w	r3, r1, ip
1a001944:	42ab      	cmp	r3, r5
1a001946:	fa00 f40e 	lsl.w	r4, r0, lr
1a00194a:	d909      	bls.n	1a001960 <__udivmoddi4+0x1bc>
1a00194c:	19ed      	adds	r5, r5, r7
1a00194e:	f101 30ff 	add.w	r0, r1, #4294967295
1a001952:	f080 808a 	bcs.w	1a001a6a <__udivmoddi4+0x2c6>
1a001956:	42ab      	cmp	r3, r5
1a001958:	f240 8087 	bls.w	1a001a6a <__udivmoddi4+0x2c6>
1a00195c:	3902      	subs	r1, #2
1a00195e:	443d      	add	r5, r7
1a001960:	1aeb      	subs	r3, r5, r3
1a001962:	fa1f f588 	uxth.w	r5, r8
1a001966:	fbb3 f0f2 	udiv	r0, r3, r2
1a00196a:	fb02 3310 	mls	r3, r2, r0, r3
1a00196e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
1a001972:	fb00 f30c 	mul.w	r3, r0, ip
1a001976:	42ab      	cmp	r3, r5
1a001978:	d907      	bls.n	1a00198a <__udivmoddi4+0x1e6>
1a00197a:	19ed      	adds	r5, r5, r7
1a00197c:	f100 38ff 	add.w	r8, r0, #4294967295
1a001980:	d26f      	bcs.n	1a001a62 <__udivmoddi4+0x2be>
1a001982:	42ab      	cmp	r3, r5
1a001984:	d96d      	bls.n	1a001a62 <__udivmoddi4+0x2be>
1a001986:	3802      	subs	r0, #2
1a001988:	443d      	add	r5, r7
1a00198a:	1aeb      	subs	r3, r5, r3
1a00198c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
1a001990:	e78f      	b.n	1a0018b2 <__udivmoddi4+0x10e>
1a001992:	f1c1 0720 	rsb	r7, r1, #32
1a001996:	fa22 f807 	lsr.w	r8, r2, r7
1a00199a:	408b      	lsls	r3, r1
1a00199c:	fa05 f401 	lsl.w	r4, r5, r1
1a0019a0:	ea48 0303 	orr.w	r3, r8, r3
1a0019a4:	fa20 fe07 	lsr.w	lr, r0, r7
1a0019a8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
1a0019ac:	40fd      	lsrs	r5, r7
1a0019ae:	ea4e 0e04 	orr.w	lr, lr, r4
1a0019b2:	fbb5 f9fc 	udiv	r9, r5, ip
1a0019b6:	ea4f 441e 	mov.w	r4, lr, lsr #16
1a0019ba:	fb0c 5519 	mls	r5, ip, r9, r5
1a0019be:	fa1f f883 	uxth.w	r8, r3
1a0019c2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
1a0019c6:	fb09 f408 	mul.w	r4, r9, r8
1a0019ca:	42ac      	cmp	r4, r5
1a0019cc:	fa02 f201 	lsl.w	r2, r2, r1
1a0019d0:	fa00 fa01 	lsl.w	sl, r0, r1
1a0019d4:	d908      	bls.n	1a0019e8 <__udivmoddi4+0x244>
1a0019d6:	18ed      	adds	r5, r5, r3
1a0019d8:	f109 30ff 	add.w	r0, r9, #4294967295
1a0019dc:	d243      	bcs.n	1a001a66 <__udivmoddi4+0x2c2>
1a0019de:	42ac      	cmp	r4, r5
1a0019e0:	d941      	bls.n	1a001a66 <__udivmoddi4+0x2c2>
1a0019e2:	f1a9 0902 	sub.w	r9, r9, #2
1a0019e6:	441d      	add	r5, r3
1a0019e8:	1b2d      	subs	r5, r5, r4
1a0019ea:	fa1f fe8e 	uxth.w	lr, lr
1a0019ee:	fbb5 f0fc 	udiv	r0, r5, ip
1a0019f2:	fb0c 5510 	mls	r5, ip, r0, r5
1a0019f6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
1a0019fa:	fb00 f808 	mul.w	r8, r0, r8
1a0019fe:	45a0      	cmp	r8, r4
1a001a00:	d907      	bls.n	1a001a12 <__udivmoddi4+0x26e>
1a001a02:	18e4      	adds	r4, r4, r3
1a001a04:	f100 35ff 	add.w	r5, r0, #4294967295
1a001a08:	d229      	bcs.n	1a001a5e <__udivmoddi4+0x2ba>
1a001a0a:	45a0      	cmp	r8, r4
1a001a0c:	d927      	bls.n	1a001a5e <__udivmoddi4+0x2ba>
1a001a0e:	3802      	subs	r0, #2
1a001a10:	441c      	add	r4, r3
1a001a12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a001a16:	eba4 0408 	sub.w	r4, r4, r8
1a001a1a:	fba0 8902 	umull	r8, r9, r0, r2
1a001a1e:	454c      	cmp	r4, r9
1a001a20:	46c6      	mov	lr, r8
1a001a22:	464d      	mov	r5, r9
1a001a24:	d315      	bcc.n	1a001a52 <__udivmoddi4+0x2ae>
1a001a26:	d012      	beq.n	1a001a4e <__udivmoddi4+0x2aa>
1a001a28:	b156      	cbz	r6, 1a001a40 <__udivmoddi4+0x29c>
1a001a2a:	ebba 030e 	subs.w	r3, sl, lr
1a001a2e:	eb64 0405 	sbc.w	r4, r4, r5
1a001a32:	fa04 f707 	lsl.w	r7, r4, r7
1a001a36:	40cb      	lsrs	r3, r1
1a001a38:	431f      	orrs	r7, r3
1a001a3a:	40cc      	lsrs	r4, r1
1a001a3c:	6037      	str	r7, [r6, #0]
1a001a3e:	6074      	str	r4, [r6, #4]
1a001a40:	2100      	movs	r1, #0
1a001a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001a46:	4618      	mov	r0, r3
1a001a48:	e6f8      	b.n	1a00183c <__udivmoddi4+0x98>
1a001a4a:	4690      	mov	r8, r2
1a001a4c:	e6e0      	b.n	1a001810 <__udivmoddi4+0x6c>
1a001a4e:	45c2      	cmp	sl, r8
1a001a50:	d2ea      	bcs.n	1a001a28 <__udivmoddi4+0x284>
1a001a52:	ebb8 0e02 	subs.w	lr, r8, r2
1a001a56:	eb69 0503 	sbc.w	r5, r9, r3
1a001a5a:	3801      	subs	r0, #1
1a001a5c:	e7e4      	b.n	1a001a28 <__udivmoddi4+0x284>
1a001a5e:	4628      	mov	r0, r5
1a001a60:	e7d7      	b.n	1a001a12 <__udivmoddi4+0x26e>
1a001a62:	4640      	mov	r0, r8
1a001a64:	e791      	b.n	1a00198a <__udivmoddi4+0x1e6>
1a001a66:	4681      	mov	r9, r0
1a001a68:	e7be      	b.n	1a0019e8 <__udivmoddi4+0x244>
1a001a6a:	4601      	mov	r1, r0
1a001a6c:	e778      	b.n	1a001960 <__udivmoddi4+0x1bc>
1a001a6e:	3802      	subs	r0, #2
1a001a70:	443c      	add	r4, r7
1a001a72:	e745      	b.n	1a001900 <__udivmoddi4+0x15c>
1a001a74:	4608      	mov	r0, r1
1a001a76:	e708      	b.n	1a00188a <__udivmoddi4+0xe6>
1a001a78:	f1a8 0802 	sub.w	r8, r8, #2
1a001a7c:	443d      	add	r5, r7
1a001a7e:	e72b      	b.n	1a0018d8 <__udivmoddi4+0x134>

1a001a80 <__aeabi_idiv0>:
1a001a80:	4770      	bx	lr
1a001a82:	bf00      	nop

1a001a84 <memset>:
1a001a84:	4402      	add	r2, r0
1a001a86:	4603      	mov	r3, r0
1a001a88:	4293      	cmp	r3, r2
1a001a8a:	d100      	bne.n	1a001a8e <memset+0xa>
1a001a8c:	4770      	bx	lr
1a001a8e:	f803 1b01 	strb.w	r1, [r3], #1
1a001a92:	e7f9      	b.n	1a001a88 <memset+0x4>
1a001a94:	08040201 	.word	0x08040201
1a001a98:	0f0f0f03 	.word	0x0f0f0f03
1a001a9c:	000000ff 	.word	0x000000ff

1a001aa0 <periph_to_base>:
1a001aa0:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a001ab0:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a001ac0:	000100e0 01000100 01200003 00060120     .......... . ...
1a001ad0:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a001ae0:	01820013 00120182 01a201a2 01c20011     ................
1a001af0:	001001c2 01e201e2 0202000f 000e0202     ................
1a001b00:	02220222 0223000d 001c0223              "."...#.#...

1a001b0c <InitClkStates>:
1a001b0c:	00010100 00010909 0001090a 01010701     ................
1a001b1c:	00010902 00010906 0101090c 0001090d     ................
1a001b2c:	0001090e 0001090f 00010910 00010911     ................
1a001b3c:	00010912 00010913 00011114 00011119     ................
1a001b4c:	0001111a 0001111b                       ........

1a001b54 <UART_BClock>:
1a001b54:	01a201c2 01620182                       ......b.

1a001b5c <UART_PClock>:
1a001b5c:	00820081 00a200a1                       ........

1a001b64 <ExtRateIn>:
1a001b64:	00000000                                ....

1a001b68 <OscRateIn>:
1a001b68:	00b71b00                                ....

1a001b6c <gpioLEDBits>:
1a001b6c:	0b010e00 00050c01 02050105              ............

1a001b78 <InitClkStates>:
1a001b78:	00010308 00010307 01010f01              ............

1a001b84 <pinmuxing>:
1a001b84:	00400a02 00400b02 00400c02 00440002     ..@...@...@...D.
1a001b94:	00440102 00440202 00520302 00520402     ..D...D...R...R.
1a001ba4:	00520509 00570609 00570206 00500001     ..R...W...W...P.
1a001bb4:	00500101 00500201 00500601 00f30f01     ..P...P...P.....
1a001bc4:	00f71001 00f31101 00b31201 00f01301     ................
1a001bd4:	00b31401 00b60707 00f20000 00b60100     ................

1a001be4 <gpioPinsConfig>:
1a001be4:	02000104 00050701 05010d03 04080100     ................
1a001bf4:	02020002 02000304 00000403 04070002     ................
1a001c04:	030c0300 09050402 05040103 04030208     ................
1a001c14:	04020305 06040504 0802000c 03000b06     ................
1a001c24:	00090607 07060503 060f0504 03030004     ................
1a001c34:	02000404 00050404 06040502 04060200     ................
1a001c44:	0c050408 05040a04 0003010e 14010a00     ................
1a001c54:	010f0000 0d000012 00001101 0010010c     ................
1a001c64:	07070300 000f0300 01000001 00000000     ................
1a001c74:	000a0600 08060603 06100504 04030005     ................
1a001c84:	03000106 04090400 04010d05 010b0000     ................
1a001c94:	0200000f 00000001 00010104 02010800     ................
1a001ca4:	01090000 09010006 05040002 04010200     ................
1a001cb4:	02020105 02020504 0e00000a 01000b02     ................
1a001cc4:	000c020b 00040c01 04000200 01020001     ................
1a001cd4:	02000204 00030402 03070302 070b0300     ................
1a001ce4:	0c030004 03000507 0006070d 01020e03     ................
1a001cf4:	04010504 06020006 02000504 00040405     ................
1a001d04:	08040402 040c0504 0d050409 05040a04     ................
1a001d14:	0005010e ffff0801                       ........
